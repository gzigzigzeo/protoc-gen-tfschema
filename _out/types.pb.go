// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.14.0
// source: types.proto

package types

import (
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	wrappers "github.com/gravitational/teleport/api/types/wrappers"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// RequestState represents the state of a request for escalated privilege.
type RequestState int32

const (
	// NONE variant exists to allow RequestState to be explicitly omitted
	// in certain circumstances (e.g. in an AccessRequestFilter).
	RequestState_NONE RequestState = 0
	// PENDING variant is the default for newly created requests.
	RequestState_PENDING RequestState = 1
	// APPROVED variant indicates that a request has been accepted by
	// an administrating party.
	RequestState_APPROVED RequestState = 2
	// DENIED variant indicates that a request has been rejected by
	// an administrating party.
	RequestState_DENIED RequestState = 3
)

// Enum value maps for RequestState.
var (
	RequestState_name = map[int32]string{
		0: "NONE",
		1: "PENDING",
		2: "APPROVED",
		3: "DENIED",
	}
	RequestState_value = map[string]int32{
		"NONE":     0,
		"PENDING":  1,
		"APPROVED": 2,
		"DENIED":   3,
	}
)

func (x RequestState) Enum() *RequestState {
	p := new(RequestState)
	*p = x
	return p
}

func (x RequestState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (RequestState) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[0].Descriptor()
}

func (RequestState) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[0]
}

func (x RequestState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use RequestState.Descriptor instead.
func (RequestState) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

// Type is the type of keep alive, used by servers. At the moment only
// "node", "app" and "database" are supported.
type KeepAlive_KeepAliveType int32

const (
	KeepAlive_UNKNOWN  KeepAlive_KeepAliveType = 0
	KeepAlive_NODE     KeepAlive_KeepAliveType = 1
	KeepAlive_APP      KeepAlive_KeepAliveType = 2
	KeepAlive_DATABASE KeepAlive_KeepAliveType = 3
)

// Enum value maps for KeepAlive_KeepAliveType.
var (
	KeepAlive_KeepAliveType_name = map[int32]string{
		0: "UNKNOWN",
		1: "NODE",
		2: "APP",
		3: "DATABASE",
	}
	KeepAlive_KeepAliveType_value = map[string]int32{
		"UNKNOWN":  0,
		"NODE":     1,
		"APP":      2,
		"DATABASE": 3,
	}
)

func (x KeepAlive_KeepAliveType) Enum() *KeepAlive_KeepAliveType {
	p := new(KeepAlive_KeepAliveType)
	*p = x
	return p
}

func (x KeepAlive_KeepAliveType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeepAlive_KeepAliveType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[1].Descriptor()
}

func (KeepAlive_KeepAliveType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[1]
}

func (x KeepAlive_KeepAliveType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use KeepAlive_KeepAliveType.Descriptor instead.
func (KeepAlive_KeepAliveType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0, 0}
}

// SigningAlg is the algorithm used for signing new SSH certificates using
// SigningKeys.
type CertAuthoritySpecV2_SigningAlgType int32

const (
	CertAuthoritySpecV2_UNKNOWN      CertAuthoritySpecV2_SigningAlgType = 0
	CertAuthoritySpecV2_RSA_SHA1     CertAuthoritySpecV2_SigningAlgType = 1
	CertAuthoritySpecV2_RSA_SHA2_256 CertAuthoritySpecV2_SigningAlgType = 2
	CertAuthoritySpecV2_RSA_SHA2_512 CertAuthoritySpecV2_SigningAlgType = 3
)

// Enum value maps for CertAuthoritySpecV2_SigningAlgType.
var (
	CertAuthoritySpecV2_SigningAlgType_name = map[int32]string{
		0: "UNKNOWN",
		1: "RSA_SHA1",
		2: "RSA_SHA2_256",
		3: "RSA_SHA2_512",
	}
	CertAuthoritySpecV2_SigningAlgType_value = map[string]int32{
		"UNKNOWN":      0,
		"RSA_SHA1":     1,
		"RSA_SHA2_256": 2,
		"RSA_SHA2_512": 3,
	}
)

func (x CertAuthoritySpecV2_SigningAlgType) Enum() *CertAuthoritySpecV2_SigningAlgType {
	p := new(CertAuthoritySpecV2_SigningAlgType)
	*p = x
	return p
}

func (x CertAuthoritySpecV2_SigningAlgType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CertAuthoritySpecV2_SigningAlgType) Descriptor() protoreflect.EnumDescriptor {
	return file_types_proto_enumTypes[2].Descriptor()
}

func (CertAuthoritySpecV2_SigningAlgType) Type() protoreflect.EnumType {
	return &file_types_proto_enumTypes[2]
}

func (x CertAuthoritySpecV2_SigningAlgType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CertAuthoritySpecV2_SigningAlgType.Descriptor instead.
func (CertAuthoritySpecV2_SigningAlgType) EnumDescriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{16, 0}
}

type KeepAlive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name of the resource to keep alive.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Namespace is the namespace of the resource.
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	// LeaseID is ID of the lease.
	LeaseID int64 `protobuf:"varint,3,opt,name=LeaseID,proto3" json:"LeaseID,omitempty"`
	// Expires is set to update expiry time of the resource.
	Expires *timestamppb.Timestamp  `protobuf:"bytes,4,opt,name=Expires,proto3" json:"Expires,omitempty"`
	Type    KeepAlive_KeepAliveType `protobuf:"varint,9,opt,name=Type,proto3,enum=types.KeepAlive_KeepAliveType" json:"Type,omitempty"`
	// HostID is an optional UUID of the host the resource belongs to.
	HostID string `protobuf:"bytes,10,opt,name=HostID,proto3" json:"HostID,omitempty"`
}

func (x *KeepAlive) Reset() {
	*x = KeepAlive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeepAlive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeepAlive) ProtoMessage() {}

func (x *KeepAlive) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeepAlive.ProtoReflect.Descriptor instead.
func (*KeepAlive) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{0}
}

func (x *KeepAlive) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KeepAlive) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *KeepAlive) GetLeaseID() int64 {
	if x != nil {
		return x.LeaseID
	}
	return 0
}

func (x *KeepAlive) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *KeepAlive) GetType() KeepAlive_KeepAliveType {
	if x != nil {
		return x.Type
	}
	return KeepAlive_UNKNOWN
}

func (x *KeepAlive) GetHostID() string {
	if x != nil {
		return x.HostID
	}
	return ""
}

// Metadata is resource metadata
type Metadata struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is an object name
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// Namespace is object namespace. The field should be called "namespace"
	// when it returns in Teleport 2.4.
	Namespace string `protobuf:"bytes,2,opt,name=Namespace,proto3" json:"Namespace,omitempty"`
	// Description is object description
	Description string `protobuf:"bytes,3,opt,name=Description,proto3" json:"Description,omitempty"`
	// Labels is a set of labels
	Labels map[string]string `protobuf:"bytes,5,rep,name=Labels,proto3" json:"Labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Expires is a global expiry time header can be set on any resource in the
	// system.
	Expires *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=Expires,proto3" json:"Expires,omitempty"`
	// ID is a record ID
	ID int64 `protobuf:"varint,7,opt,name=ID,proto3" json:"ID,omitempty"`
}

func (x *Metadata) Reset() {
	*x = Metadata{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Metadata) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Metadata) ProtoMessage() {}

func (x *Metadata) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Metadata.ProtoReflect.Descriptor instead.
func (*Metadata) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{1}
}

func (x *Metadata) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Metadata) GetNamespace() string {
	if x != nil {
		return x.Namespace
	}
	return ""
}

func (x *Metadata) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *Metadata) GetLabels() map[string]string {
	if x != nil {
		return x.Labels
	}
	return nil
}

func (x *Metadata) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *Metadata) GetID() int64 {
	if x != nil {
		return x.ID
	}
	return 0
}

// Rotation is a status of the rotation of the certificate authority
type Rotation struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// State could be one of "init" or "in_progress".
	State string `protobuf:"bytes,1,opt,name=State,proto3" json:"State,omitempty"`
	// Phase is the current rotation phase.
	Phase string `protobuf:"bytes,2,opt,name=Phase,proto3" json:"Phase,omitempty"`
	// Mode sets manual or automatic rotation mode.
	Mode string `protobuf:"bytes,3,opt,name=Mode,proto3" json:"Mode,omitempty"`
	// CurrentID is the ID of the rotation operation
	// to differentiate between rotation attempts.
	CurrentID string `protobuf:"bytes,4,opt,name=CurrentID,proto3" json:"CurrentID,omitempty"`
	// Started is set to the time when rotation has been started
	// in case if the state of the rotation is "in_progress".
	Started *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Started,proto3" json:"Started,omitempty"`
	// GracePeriod is a period during which old and new CA
	// are valid for checking purposes, but only new CA is issuing certificates.
	GracePeriod int64 `protobuf:"varint,6,opt,name=GracePeriod,proto3" json:"GracePeriod,omitempty"`
	// LastRotated specifies the last time of the completed rotation.
	LastRotated *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=LastRotated,proto3" json:"LastRotated,omitempty"`
	// Schedule is a rotation schedule - used in
	// automatic mode to switch beetween phases.
	Schedule *RotationSchedule `protobuf:"bytes,8,opt,name=Schedule,proto3" json:"Schedule,omitempty"`
}

func (x *Rotation) Reset() {
	*x = Rotation{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rotation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rotation) ProtoMessage() {}

func (x *Rotation) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rotation.ProtoReflect.Descriptor instead.
func (*Rotation) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{2}
}

func (x *Rotation) GetState() string {
	if x != nil {
		return x.State
	}
	return ""
}

func (x *Rotation) GetPhase() string {
	if x != nil {
		return x.Phase
	}
	return ""
}

func (x *Rotation) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *Rotation) GetCurrentID() string {
	if x != nil {
		return x.CurrentID
	}
	return ""
}

func (x *Rotation) GetStarted() *timestamppb.Timestamp {
	if x != nil {
		return x.Started
	}
	return nil
}

func (x *Rotation) GetGracePeriod() int64 {
	if x != nil {
		return x.GracePeriod
	}
	return 0
}

func (x *Rotation) GetLastRotated() *timestamppb.Timestamp {
	if x != nil {
		return x.LastRotated
	}
	return nil
}

func (x *Rotation) GetSchedule() *RotationSchedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

// RotationSchedule is a rotation schedule setting time switches
// for different phases.
type RotationSchedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// UpdateClients specifies time to switch to the "Update clients" phase
	UpdateClients *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=UpdateClients,proto3" json:"UpdateClients,omitempty"`
	// UpdateServers specifies time to switch to the "Update servers" phase.
	UpdateServers *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=UpdateServers,proto3" json:"UpdateServers,omitempty"`
	// Standby specifies time to switch to the "Standby" phase.
	Standby *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=Standby,proto3" json:"Standby,omitempty"`
}

func (x *RotationSchedule) Reset() {
	*x = RotationSchedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RotationSchedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RotationSchedule) ProtoMessage() {}

func (x *RotationSchedule) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RotationSchedule.ProtoReflect.Descriptor instead.
func (*RotationSchedule) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{3}
}

func (x *RotationSchedule) GetUpdateClients() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateClients
	}
	return nil
}

func (x *RotationSchedule) GetUpdateServers() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdateServers
	}
	return nil
}

func (x *RotationSchedule) GetStandby() *timestamppb.Timestamp {
	if x != nil {
		return x.Standby
	}
	return nil
}

// ResorceHeader is a shared resource header
// used in cases when only type and name is known
type ResourceHeader struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is User metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
}

func (x *ResourceHeader) Reset() {
	*x = ResourceHeader{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResourceHeader) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResourceHeader) ProtoMessage() {}

func (x *ResourceHeader) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResourceHeader.ProtoReflect.Descriptor instead.
func (*ResourceHeader) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{4}
}

func (x *ResourceHeader) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResourceHeader) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *ResourceHeader) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ResourceHeader) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// DatabaseServerV2 represents a database access server.
type DatabaseServerV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is the database server resource kind.
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource subkind.
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is the resource version.
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is the database server metadata.
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is the database server spec.
	Spec *DatabaseServerSpecV3 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *DatabaseServerV3) Reset() {
	*x = DatabaseServerV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseServerV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseServerV3) ProtoMessage() {}

func (x *DatabaseServerV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseServerV3.ProtoReflect.Descriptor instead.
func (*DatabaseServerV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{5}
}

func (x *DatabaseServerV3) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *DatabaseServerV3) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *DatabaseServerV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DatabaseServerV3) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *DatabaseServerV3) GetSpec() *DatabaseServerSpecV3 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// DatabaseServerSpecV3 is the database server spec.
type DatabaseServerSpecV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Description is a free-form text describing this database server.
	Description string `protobuf:"bytes,1,opt,name=Description,proto3" json:"Description,omitempty"`
	// Protocol is the database type e.g. postgres, mysql, etc.
	Protocol string `protobuf:"bytes,2,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	// URI is the database connection address.
	URI string `protobuf:"bytes,3,opt,name=URI,proto3" json:"URI,omitempty"`
	// CACert is an optional base64-encoded database CA certificate.
	CACert []byte `protobuf:"bytes,4,opt,name=CACert,proto3" json:"CACert,omitempty"`
	// AWS contains AWS specific settings for RDS/Aurora databases.
	AWS *AWS `protobuf:"bytes,5,opt,name=AWS,proto3" json:"AWS,omitempty"`
	// Version is the Teleport version that the server is running.
	Version string `protobuf:"bytes,6,opt,name=Version,proto3" json:"Version,omitempty"`
	// Hostname is the database server hostname.
	Hostname string `protobuf:"bytes,7,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	// HostID is the ID of the host the database server is running on.
	HostID string `protobuf:"bytes,8,opt,name=HostID,proto3" json:"HostID,omitempty"`
	// DynamicLabels is the database server dynamic labels.
	DynamicLabels map[string]*CommandLabelV2 `protobuf:"bytes,9,rep,name=DynamicLabels,proto3" json:"DynamicLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Rotation contains the server CA rotation information.
	Rotation *Rotation `protobuf:"bytes,10,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
}

func (x *DatabaseServerSpecV3) Reset() {
	*x = DatabaseServerSpecV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseServerSpecV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseServerSpecV3) ProtoMessage() {}

func (x *DatabaseServerSpecV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseServerSpecV3.ProtoReflect.Descriptor instead.
func (*DatabaseServerSpecV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{6}
}

func (x *DatabaseServerSpecV3) GetDescription() string {
	if x != nil {
		return x.Description
	}
	return ""
}

func (x *DatabaseServerSpecV3) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *DatabaseServerSpecV3) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *DatabaseServerSpecV3) GetCACert() []byte {
	if x != nil {
		return x.CACert
	}
	return nil
}

func (x *DatabaseServerSpecV3) GetAWS() *AWS {
	if x != nil {
		return x.AWS
	}
	return nil
}

func (x *DatabaseServerSpecV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *DatabaseServerSpecV3) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *DatabaseServerSpecV3) GetHostID() string {
	if x != nil {
		return x.HostID
	}
	return ""
}

func (x *DatabaseServerSpecV3) GetDynamicLabels() map[string]*CommandLabelV2 {
	if x != nil {
		return x.DynamicLabels
	}
	return nil
}

func (x *DatabaseServerSpecV3) GetRotation() *Rotation {
	if x != nil {
		return x.Rotation
	}
	return nil
}

// AWS contains AWS specific settings such as region.
type AWS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Region is a AWS cloud region.
	Region string `protobuf:"bytes,1,opt,name=Region,proto3" json:"Region,omitempty"`
}

func (x *AWS) Reset() {
	*x = AWS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AWS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AWS) ProtoMessage() {}

func (x *AWS) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AWS.ProtoReflect.Descriptor instead.
func (*AWS) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{7}
}

func (x *AWS) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

// ServerV2 represents a Node, App, Database, Proxy or Auth server in a Teleport cluster.
type ServerV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is User metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a server spec
	Spec *ServerSpecV2 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *ServerV2) Reset() {
	*x = ServerV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerV2) ProtoMessage() {}

func (x *ServerV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerV2.ProtoReflect.Descriptor instead.
func (*ServerV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{8}
}

func (x *ServerV2) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ServerV2) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *ServerV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerV2) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ServerV2) GetSpec() *ServerSpecV2 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ServerSpecV2 is a specification for V2 Server
type ServerSpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Addr is server host:port address
	Addr string `protobuf:"bytes,1,opt,name=Addr,proto3" json:"Addr,omitempty"`
	// PublicAddr is the public address this cluster can be reached at.
	PublicAddr string `protobuf:"bytes,2,opt,name=PublicAddr,proto3" json:"PublicAddr,omitempty"`
	// Hostname is server hostname
	Hostname string `protobuf:"bytes,3,opt,name=Hostname,proto3" json:"Hostname,omitempty"`
	// CmdLabels is server dynamic labels
	CmdLabels map[string]*CommandLabelV2 `protobuf:"bytes,4,rep,name=CmdLabels,proto3" json:"CmdLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Rotation specifies server rotation
	Rotation *Rotation `protobuf:"bytes,5,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	// UseTunnel indicates that connections to this server should occur over a
	// reverse tunnel.
	UseTunnel bool `protobuf:"varint,6,opt,name=UseTunnel,proto3" json:"UseTunnel,omitempty"`
	// TeleportVersion is the teleport version that the server is running on
	Version string `protobuf:"bytes,7,opt,name=Version,proto3" json:"Version,omitempty"`
	// Apps is a list of applications this server is proxying.
	Apps []*App `protobuf:"bytes,9,rep,name=Apps,proto3" json:"Apps,omitempty"`
	// KubernetesClusters is a list of kubernetes clusters provided by this
	// Proxy or KubeService server.
	//
	// Important: jsontag must not be "kubernetes_clusters", because a
	// different field with that jsontag existed in 4.4:
	// https://github.com/gravitational/teleport/issues/4862
	KubernetesClusters []*KubernetesCluster `protobuf:"bytes,10,rep,name=KubernetesClusters,proto3" json:"KubernetesClusters,omitempty"`
}

func (x *ServerSpecV2) Reset() {
	*x = ServerSpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServerSpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServerSpecV2) ProtoMessage() {}

func (x *ServerSpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServerSpecV2.ProtoReflect.Descriptor instead.
func (*ServerSpecV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{9}
}

func (x *ServerSpecV2) GetAddr() string {
	if x != nil {
		return x.Addr
	}
	return ""
}

func (x *ServerSpecV2) GetPublicAddr() string {
	if x != nil {
		return x.PublicAddr
	}
	return ""
}

func (x *ServerSpecV2) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *ServerSpecV2) GetCmdLabels() map[string]*CommandLabelV2 {
	if x != nil {
		return x.CmdLabels
	}
	return nil
}

func (x *ServerSpecV2) GetRotation() *Rotation {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *ServerSpecV2) GetUseTunnel() bool {
	if x != nil {
		return x.UseTunnel
	}
	return false
}

func (x *ServerSpecV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ServerSpecV2) GetApps() []*App {
	if x != nil {
		return x.Apps
	}
	return nil
}

func (x *ServerSpecV2) GetKubernetesClusters() []*KubernetesCluster {
	if x != nil {
		return x.KubernetesClusters
	}
	return nil
}

// App is a specific application that a server proxies.
type App struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of the application.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// URI is the internal address the application is available at.
	URI string `protobuf:"bytes,2,opt,name=URI,proto3" json:"URI,omitempty"`
	// PublicAddr is the public address the application is accessible at.
	PublicAddr string `protobuf:"bytes,3,opt,name=PublicAddr,proto3" json:"PublicAddr,omitempty"`
	// StaticLabels is map of static labels associated with an application.
	// Used for RBAC.
	StaticLabels map[string]string `protobuf:"bytes,4,rep,name=StaticLabels,proto3" json:"StaticLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DynamicLabels is map of dynamic labels associated with an application.
	// Used for RBAC.
	DynamicLabels      map[string]*CommandLabelV2 `protobuf:"bytes,5,rep,name=DynamicLabels,proto3" json:"DynamicLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	InsecureSkipVerify bool                       `protobuf:"varint,6,opt,name=InsecureSkipVerify,proto3" json:"InsecureSkipVerify,omitempty"`
	// Rewrite is a list of rewriting rules to apply to requests and responses.
	Rewrite *Rewrite `protobuf:"bytes,7,opt,name=Rewrite,proto3" json:"Rewrite,omitempty"`
}

func (x *App) Reset() {
	*x = App{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *App) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*App) ProtoMessage() {}

func (x *App) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use App.ProtoReflect.Descriptor instead.
func (*App) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{10}
}

func (x *App) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *App) GetURI() string {
	if x != nil {
		return x.URI
	}
	return ""
}

func (x *App) GetPublicAddr() string {
	if x != nil {
		return x.PublicAddr
	}
	return ""
}

func (x *App) GetStaticLabels() map[string]string {
	if x != nil {
		return x.StaticLabels
	}
	return nil
}

func (x *App) GetDynamicLabels() map[string]*CommandLabelV2 {
	if x != nil {
		return x.DynamicLabels
	}
	return nil
}

func (x *App) GetInsecureSkipVerify() bool {
	if x != nil {
		return x.InsecureSkipVerify
	}
	return false
}

func (x *App) GetRewrite() *Rewrite {
	if x != nil {
		return x.Rewrite
	}
	return nil
}

// Rewrite is a list of rewriting rules to apply to requests and responses.
type Rewrite struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Redirect defines a list of hosts which will be rewritten to the public
	// address of the application if they occur in the "Location" header.
	Redirect []string `protobuf:"bytes,1,rep,name=Redirect,proto3" json:"Redirect,omitempty"`
}

func (x *Rewrite) Reset() {
	*x = Rewrite{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rewrite) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rewrite) ProtoMessage() {}

func (x *Rewrite) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rewrite.ProtoReflect.Descriptor instead.
func (*Rewrite) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{11}
}

func (x *Rewrite) GetRedirect() []string {
	if x != nil {
		return x.Redirect
	}
	return nil
}

// CommandLabelV2 is a label that has a value as a result of the
// output generated by running command, e.g. hostname
type CommandLabelV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Period is a time between command runs
	Period int64 `protobuf:"varint,1,opt,name=Period,proto3" json:"Period,omitempty"`
	// Command is a command to run
	Command []string `protobuf:"bytes,2,rep,name=Command,proto3" json:"Command,omitempty"`
	// Result captures standard output
	Result string `protobuf:"bytes,3,opt,name=Result,proto3" json:"Result,omitempty"`
}

func (x *CommandLabelV2) Reset() {
	*x = CommandLabelV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CommandLabelV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CommandLabelV2) ProtoMessage() {}

func (x *CommandLabelV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CommandLabelV2.ProtoReflect.Descriptor instead.
func (*CommandLabelV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{12}
}

func (x *CommandLabelV2) GetPeriod() int64 {
	if x != nil {
		return x.Period
	}
	return 0
}

func (x *CommandLabelV2) GetCommand() []string {
	if x != nil {
		return x.Command
	}
	return nil
}

func (x *CommandLabelV2) GetResult() string {
	if x != nil {
		return x.Result
	}
	return ""
}

// TLSKeyPair is a TLS key pair
type TLSKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Cert is a PEM encoded TLS cert
	Cert []byte `protobuf:"bytes,1,opt,name=Cert,proto3" json:"Cert,omitempty"`
	// Key is a PEM encoded TLS key
	Key []byte `protobuf:"bytes,2,opt,name=Key,proto3" json:"Key,omitempty"`
}

func (x *TLSKeyPair) Reset() {
	*x = TLSKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TLSKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TLSKeyPair) ProtoMessage() {}

func (x *TLSKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TLSKeyPair.ProtoReflect.Descriptor instead.
func (*TLSKeyPair) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{13}
}

func (x *TLSKeyPair) GetCert() []byte {
	if x != nil {
		return x.Cert
	}
	return nil
}

func (x *TLSKeyPair) GetKey() []byte {
	if x != nil {
		return x.Key
	}
	return nil
}

// JWTKeyPair is a PEM encoded keypair used for signing JWT tokens.
type JWTKeyPair struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PublicKey is a PEM encoded public key.
	PublicKey []byte `protobuf:"bytes,1,opt,name=PublicKey,proto3" json:"PublicKey,omitempty"`
	// PrivateKey is a PEM encoded private key.
	PrivateKey []byte `protobuf:"bytes,2,opt,name=PrivateKey,proto3" json:"PrivateKey,omitempty"`
}

func (x *JWTKeyPair) Reset() {
	*x = JWTKeyPair{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *JWTKeyPair) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*JWTKeyPair) ProtoMessage() {}

func (x *JWTKeyPair) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use JWTKeyPair.ProtoReflect.Descriptor instead.
func (*JWTKeyPair) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{14}
}

func (x *JWTKeyPair) GetPublicKey() []byte {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *JWTKeyPair) GetPrivateKey() []byte {
	if x != nil {
		return x.PrivateKey
	}
	return nil
}

// CertAuthorityV2 is version 2 resource spec for Cert Authority
type CertAuthorityV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is connector metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec contains cert authority specification
	Spec *CertAuthoritySpecV2 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *CertAuthorityV2) Reset() {
	*x = CertAuthorityV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertAuthorityV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertAuthorityV2) ProtoMessage() {}

func (x *CertAuthorityV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertAuthorityV2.ProtoReflect.Descriptor instead.
func (*CertAuthorityV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{15}
}

func (x *CertAuthorityV2) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *CertAuthorityV2) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *CertAuthorityV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *CertAuthorityV2) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *CertAuthorityV2) GetSpec() *CertAuthoritySpecV2 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// CertAuthoritySpecV2 is a host or user certificate authority that
// can check and if it has private key stored as well, sign it too
type CertAuthoritySpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is either user or host certificate authority
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// DELETE IN(2.7.0) this field is deprecated,
	// as resource name matches cluster name after migrations.
	// and this property is enforced by the auth server code.
	// ClusterName identifies cluster name this authority serves,
	// for host authorities that means base hostname of all servers,
	// for user authorities that means organization name
	ClusterName string `protobuf:"bytes,2,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	// Checkers is a list of SSH public keys that can be used to check
	// certificate signatures
	CheckingKeys [][]byte `protobuf:"bytes,3,rep,name=CheckingKeys,proto3" json:"CheckingKeys,omitempty"`
	// SigningKeys is a list of private keys used for signing
	SigningKeys [][]byte `protobuf:"bytes,4,rep,name=SigningKeys,proto3" json:"SigningKeys,omitempty"`
	// Roles is a list of roles assumed by users signed by this CA
	Roles []string `protobuf:"bytes,5,rep,name=Roles,proto3" json:"Roles,omitempty"`
	// RoleMap specifies role mappings to remote roles
	RoleMap []*RoleMapping `protobuf:"bytes,6,rep,name=RoleMap,proto3" json:"RoleMap,omitempty"`
	// TLS is a list of TLS key pairs
	TLSKeyPairs []*TLSKeyPair `protobuf:"bytes,7,rep,name=TLSKeyPairs,proto3" json:"TLSKeyPairs,omitempty"`
	// Rotation is a status of the certificate authority rotation
	Rotation   *Rotation                          `protobuf:"bytes,8,opt,name=Rotation,proto3" json:"Rotation,omitempty"`
	SigningAlg CertAuthoritySpecV2_SigningAlgType `protobuf:"varint,9,opt,name=SigningAlg,proto3,enum=types.CertAuthoritySpecV2_SigningAlgType" json:"SigningAlg,omitempty"`
	// JWTKeyPair is a list of JWT key pairs.
	JWTKeyPairs []*JWTKeyPair `protobuf:"bytes,10,rep,name=JWTKeyPairs,proto3" json:"JWTKeyPairs,omitempty"`
}

func (x *CertAuthoritySpecV2) Reset() {
	*x = CertAuthoritySpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CertAuthoritySpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CertAuthoritySpecV2) ProtoMessage() {}

func (x *CertAuthoritySpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CertAuthoritySpecV2.ProtoReflect.Descriptor instead.
func (*CertAuthoritySpecV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{16}
}

func (x *CertAuthoritySpecV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *CertAuthoritySpecV2) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *CertAuthoritySpecV2) GetCheckingKeys() [][]byte {
	if x != nil {
		return x.CheckingKeys
	}
	return nil
}

func (x *CertAuthoritySpecV2) GetSigningKeys() [][]byte {
	if x != nil {
		return x.SigningKeys
	}
	return nil
}

func (x *CertAuthoritySpecV2) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *CertAuthoritySpecV2) GetRoleMap() []*RoleMapping {
	if x != nil {
		return x.RoleMap
	}
	return nil
}

func (x *CertAuthoritySpecV2) GetTLSKeyPairs() []*TLSKeyPair {
	if x != nil {
		return x.TLSKeyPairs
	}
	return nil
}

func (x *CertAuthoritySpecV2) GetRotation() *Rotation {
	if x != nil {
		return x.Rotation
	}
	return nil
}

func (x *CertAuthoritySpecV2) GetSigningAlg() CertAuthoritySpecV2_SigningAlgType {
	if x != nil {
		return x.SigningAlg
	}
	return CertAuthoritySpecV2_UNKNOWN
}

func (x *CertAuthoritySpecV2) GetJWTKeyPairs() []*JWTKeyPair {
	if x != nil {
		return x.JWTKeyPairs
	}
	return nil
}

// RoleMappping provides mapping of remote roles to local roles
// for trusted clusters
type RoleMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Remote specifies remote role name to map from
	Remote string `protobuf:"bytes,1,opt,name=Remote,proto3" json:"Remote,omitempty"`
	// Local specifies local roles to map to
	Local []string `protobuf:"bytes,2,rep,name=Local,proto3" json:"Local,omitempty"`
}

func (x *RoleMapping) Reset() {
	*x = RoleMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleMapping) ProtoMessage() {}

func (x *RoleMapping) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleMapping.ProtoReflect.Descriptor instead.
func (*RoleMapping) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{17}
}

func (x *RoleMapping) GetRemote() string {
	if x != nil {
		return x.Remote
	}
	return ""
}

func (x *RoleMapping) GetLocal() []string {
	if x != nil {
		return x.Local
	}
	return nil
}

// ProvisionTokenV1 is a provisioning token V1
type ProvisionTokenV1 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roles is a list of roles associated with the token,
	// that will be converted to metadata in the SSH and X509
	// certificates issued to the user of the token
	Roles []string `protobuf:"bytes,1,rep,name=Roles,proto3" json:"Roles,omitempty"`
	// Expires is a global expiry time header can be set on any resource in the
	// system.
	Expires *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Expires,proto3" json:"Expires,omitempty"`
	// Token is a token name
	Token string `protobuf:"bytes,3,opt,name=Token,proto3" json:"Token,omitempty"`
}

func (x *ProvisionTokenV1) Reset() {
	*x = ProvisionTokenV1{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionTokenV1) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionTokenV1) ProtoMessage() {}

func (x *ProvisionTokenV1) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionTokenV1.ProtoReflect.Descriptor instead.
func (*ProvisionTokenV1) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{18}
}

func (x *ProvisionTokenV1) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *ProvisionTokenV1) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *ProvisionTokenV1) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

// ProvisionTokenV2 specifies provisioning token
type ProvisionTokenV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is User metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a provisioning token V2 spec
	Spec *ProvisionTokenSpecV2 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *ProvisionTokenV2) Reset() {
	*x = ProvisionTokenV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionTokenV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionTokenV2) ProtoMessage() {}

func (x *ProvisionTokenV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionTokenV2.ProtoReflect.Descriptor instead.
func (*ProvisionTokenV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{19}
}

func (x *ProvisionTokenV2) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ProvisionTokenV2) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *ProvisionTokenV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ProvisionTokenV2) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ProvisionTokenV2) GetSpec() *ProvisionTokenSpecV2 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ProvisionTokenSpecV2 is a specification for V2 token
type ProvisionTokenSpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roles is a list of roles associated with the token,
	// that will be converted to metadata in the SSH and X509
	// certificates issued to the user of the token
	Roles []string `protobuf:"bytes,1,rep,name=Roles,proto3" json:"Roles,omitempty"`
}

func (x *ProvisionTokenSpecV2) Reset() {
	*x = ProvisionTokenSpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProvisionTokenSpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProvisionTokenSpecV2) ProtoMessage() {}

func (x *ProvisionTokenSpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProvisionTokenSpecV2.ProtoReflect.Descriptor instead.
func (*ProvisionTokenSpecV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{20}
}

func (x *ProvisionTokenSpecV2) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// StaticTokensV2 implements the StaticTokens interface.
type StaticTokensV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is User metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a provisioning token V2 spec
	Spec *StaticTokensSpecV2 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *StaticTokensV2) Reset() {
	*x = StaticTokensV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticTokensV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticTokensV2) ProtoMessage() {}

func (x *StaticTokensV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticTokensV2.ProtoReflect.Descriptor instead.
func (*StaticTokensV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{21}
}

func (x *StaticTokensV2) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *StaticTokensV2) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *StaticTokensV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *StaticTokensV2) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *StaticTokensV2) GetSpec() *StaticTokensSpecV2 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// StaticTokensSpecV2 is the actual data we care about for StaticTokensSpecV2.
type StaticTokensSpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// StaticTokens is a list of tokens that can be used to add nodes to the
	// cluster.
	StaticTokens []*ProvisionTokenV1 `protobuf:"bytes,1,rep,name=StaticTokens,proto3" json:"StaticTokens,omitempty"`
}

func (x *StaticTokensSpecV2) Reset() {
	*x = StaticTokensSpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *StaticTokensSpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StaticTokensSpecV2) ProtoMessage() {}

func (x *StaticTokensSpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StaticTokensSpecV2.ProtoReflect.Descriptor instead.
func (*StaticTokensSpecV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{22}
}

func (x *StaticTokensSpecV2) GetStaticTokens() []*ProvisionTokenV1 {
	if x != nil {
		return x.StaticTokens
	}
	return nil
}

// ClusterNameV2 implements the ClusterName interface.
type ClusterNameV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is User metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a cluster name V2 spec
	Spec *ClusterNameSpecV2 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *ClusterNameV2) Reset() {
	*x = ClusterNameV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNameV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNameV2) ProtoMessage() {}

func (x *ClusterNameV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNameV2.ProtoReflect.Descriptor instead.
func (*ClusterNameV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{23}
}

func (x *ClusterNameV2) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ClusterNameV2) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *ClusterNameV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClusterNameV2) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClusterNameV2) GetSpec() *ClusterNameSpecV2 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ClusterNameSpecV2 is the actual data we care about for ClusterName.
type ClusterNameSpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClusterName is the name of the cluster. Changing this value once the
	// cluster is setup can and will cause catastrophic problems.
	ClusterName string `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
}

func (x *ClusterNameSpecV2) Reset() {
	*x = ClusterNameSpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterNameSpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterNameSpecV2) ProtoMessage() {}

func (x *ClusterNameSpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterNameSpecV2.ProtoReflect.Descriptor instead.
func (*ClusterNameSpecV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{24}
}

func (x *ClusterNameSpecV2) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

// ClusterConfigV3 implements the ClusterConfig interface.
type ClusterConfigV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is User metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a cluster config V3 spec
	Spec *ClusterConfigSpecV3 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *ClusterConfigV3) Reset() {
	*x = ClusterConfigV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfigV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfigV3) ProtoMessage() {}

func (x *ClusterConfigV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfigV3.ProtoReflect.Descriptor instead.
func (*ClusterConfigV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{25}
}

func (x *ClusterConfigV3) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ClusterConfigV3) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *ClusterConfigV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ClusterConfigV3) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ClusterConfigV3) GetSpec() *ClusterConfigSpecV3 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ClusterConfigSpecV3 is the actual data we care about for ClusterConfig.
type ClusterConfigSpecV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SessionRecording controls where (or if) the session is recorded.
	SessionRecording string `protobuf:"bytes,1,opt,name=SessionRecording,proto3" json:"SessionRecording,omitempty"`
	// ClusterID is the unique cluster ID that is set once during the first auth
	// server startup.
	ClusterID string `protobuf:"bytes,2,opt,name=ClusterID,proto3" json:"ClusterID,omitempty"`
	// ProxyChecksHostKeys is used to control if the proxy will check host keys
	// when in recording mode.
	ProxyChecksHostKeys string `protobuf:"bytes,3,opt,name=ProxyChecksHostKeys,proto3" json:"ProxyChecksHostKeys,omitempty"`
	// Audit is a section with audit config
	Audit *AuditConfig `protobuf:"bytes,4,opt,name=Audit,proto3" json:"Audit,omitempty"`
	// ClientIdleTimeout sets global cluster default setting for client idle
	// timeouts
	ClientIdleTimeout int64 `protobuf:"varint,5,opt,name=ClientIdleTimeout,proto3" json:"ClientIdleTimeout,omitempty"`
	// DisconnectExpiredCert provides disconnect expired certificate setting -
	// if true, connections with expired client certificates will get disconnected
	DisconnectExpiredCert bool `protobuf:"varint,6,opt,name=DisconnectExpiredCert,proto3" json:"DisconnectExpiredCert,omitempty"`
	// KeepAliveInterval is the interval the server sends keep-alive messsages
	// to the client at.
	KeepAliveInterval int64 `protobuf:"varint,7,opt,name=KeepAliveInterval,proto3" json:"KeepAliveInterval,omitempty"`
	// KeepAliveCountMax is the number of keep-alive messages that can be missed
	// before
	// the server disconnects the connection to the client.
	KeepAliveCountMax int64 `protobuf:"varint,8,opt,name=KeepAliveCountMax,proto3" json:"KeepAliveCountMax,omitempty"`
	// LocalAuth is true if local authentication is enabled.
	LocalAuth bool `protobuf:"varint,9,opt,name=LocalAuth,proto3" json:"LocalAuth,omitempty"`
	// SessionControlTimeout is the session control lease expiry and defines
	// the upper limit of how long a node may be out of contact with the auth
	// server before it begins terminating controlled sessions.
	SessionControlTimeout int64 `protobuf:"varint,10,opt,name=SessionControlTimeout,proto3" json:"SessionControlTimeout,omitempty"`
}

func (x *ClusterConfigSpecV3) Reset() {
	*x = ClusterConfigSpecV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClusterConfigSpecV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClusterConfigSpecV3) ProtoMessage() {}

func (x *ClusterConfigSpecV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClusterConfigSpecV3.ProtoReflect.Descriptor instead.
func (*ClusterConfigSpecV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{26}
}

func (x *ClusterConfigSpecV3) GetSessionRecording() string {
	if x != nil {
		return x.SessionRecording
	}
	return ""
}

func (x *ClusterConfigSpecV3) GetClusterID() string {
	if x != nil {
		return x.ClusterID
	}
	return ""
}

func (x *ClusterConfigSpecV3) GetProxyChecksHostKeys() string {
	if x != nil {
		return x.ProxyChecksHostKeys
	}
	return ""
}

func (x *ClusterConfigSpecV3) GetAudit() *AuditConfig {
	if x != nil {
		return x.Audit
	}
	return nil
}

func (x *ClusterConfigSpecV3) GetClientIdleTimeout() int64 {
	if x != nil {
		return x.ClientIdleTimeout
	}
	return 0
}

func (x *ClusterConfigSpecV3) GetDisconnectExpiredCert() bool {
	if x != nil {
		return x.DisconnectExpiredCert
	}
	return false
}

func (x *ClusterConfigSpecV3) GetKeepAliveInterval() int64 {
	if x != nil {
		return x.KeepAliveInterval
	}
	return 0
}

func (x *ClusterConfigSpecV3) GetKeepAliveCountMax() int64 {
	if x != nil {
		return x.KeepAliveCountMax
	}
	return 0
}

func (x *ClusterConfigSpecV3) GetLocalAuth() bool {
	if x != nil {
		return x.LocalAuth
	}
	return false
}

func (x *ClusterConfigSpecV3) GetSessionControlTimeout() int64 {
	if x != nil {
		return x.SessionControlTimeout
	}
	return 0
}

// AuditConfig represents audit log settings in the cluster
type AuditConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is audit backend type
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// Region is a region setting for audit sessions used by cloud providers
	Region string `protobuf:"bytes,2,opt,name=Region,proto3" json:"Region,omitempty"`
	// AuditSessionsURI is a parameter where to upload sessions
	AuditSessionsURI string `protobuf:"bytes,3,opt,name=AuditSessionsURI,proto3" json:"AuditSessionsURI,omitempty"`
	// AuditEventsURI is a parameter with all supported outputs
	// for audit events
	AuditEventsURI *wrappers.StringValues `protobuf:"bytes,4,opt,name=AuditEventsURI,proto3" json:"AuditEventsURI,omitempty"`
	// AuditTableName is a DB table name used for audits
	// Deprecated in favor of AuditEventsURI
	// DELETE IN (3.1.0)
	AuditTableName string `protobuf:"bytes,5,opt,name=AuditTableName,proto3" json:"AuditTableName,omitempty"`
	// EnableContinuousBackups is used to enable (or disable) PITR (Point-In-Time Recovery).
	EnableContinuousBackups bool `protobuf:"varint,6,opt,name=EnableContinuousBackups,proto3" json:"EnableContinuousBackups,omitempty"`
	// EnableAutoScaling is used to enable (or disable) auto scaling policy.
	EnableAutoScaling bool `protobuf:"varint,7,opt,name=EnableAutoScaling,proto3" json:"EnableAutoScaling,omitempty"`
	// ReadMaxCapacity is the maximum provisioned read capacity.
	ReadMaxCapacity int64 `protobuf:"varint,8,opt,name=ReadMaxCapacity,proto3" json:"ReadMaxCapacity,omitempty"`
	// ReadMinCapacity is the minimum provisioned read capacity.
	ReadMinCapacity int64 `protobuf:"varint,9,opt,name=ReadMinCapacity,proto3" json:"ReadMinCapacity,omitempty"`
	// ReadTargetValue is the ratio of consumed read to provisioned capacity.
	ReadTargetValue float64 `protobuf:"fixed64,10,opt,name=ReadTargetValue,proto3" json:"ReadTargetValue,omitempty"`
	// WriteMaxCapacity is the maximum provisioned write capacity.
	WriteMaxCapacity int64 `protobuf:"varint,11,opt,name=WriteMaxCapacity,proto3" json:"WriteMaxCapacity,omitempty"`
	// WriteMinCapacity is the minimum provisioned write capacity.
	WriteMinCapacity int64 `protobuf:"varint,12,opt,name=WriteMinCapacity,proto3" json:"WriteMinCapacity,omitempty"`
	// WriteTargetValue is the ratio of consumed write to provisioned capacity.
	WriteTargetValue float64 `protobuf:"fixed64,13,opt,name=WriteTargetValue,proto3" json:"WriteTargetValue,omitempty"`
}

func (x *AuditConfig) Reset() {
	*x = AuditConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AuditConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AuditConfig) ProtoMessage() {}

func (x *AuditConfig) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AuditConfig.ProtoReflect.Descriptor instead.
func (*AuditConfig) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{27}
}

func (x *AuditConfig) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *AuditConfig) GetRegion() string {
	if x != nil {
		return x.Region
	}
	return ""
}

func (x *AuditConfig) GetAuditSessionsURI() string {
	if x != nil {
		return x.AuditSessionsURI
	}
	return ""
}

func (x *AuditConfig) GetAuditEventsURI() *wrappers.StringValues {
	if x != nil {
		return x.AuditEventsURI
	}
	return nil
}

func (x *AuditConfig) GetAuditTableName() string {
	if x != nil {
		return x.AuditTableName
	}
	return ""
}

func (x *AuditConfig) GetEnableContinuousBackups() bool {
	if x != nil {
		return x.EnableContinuousBackups
	}
	return false
}

func (x *AuditConfig) GetEnableAutoScaling() bool {
	if x != nil {
		return x.EnableAutoScaling
	}
	return false
}

func (x *AuditConfig) GetReadMaxCapacity() int64 {
	if x != nil {
		return x.ReadMaxCapacity
	}
	return 0
}

func (x *AuditConfig) GetReadMinCapacity() int64 {
	if x != nil {
		return x.ReadMinCapacity
	}
	return 0
}

func (x *AuditConfig) GetReadTargetValue() float64 {
	if x != nil {
		return x.ReadTargetValue
	}
	return 0
}

func (x *AuditConfig) GetWriteMaxCapacity() int64 {
	if x != nil {
		return x.WriteMaxCapacity
	}
	return 0
}

func (x *AuditConfig) GetWriteMinCapacity() int64 {
	if x != nil {
		return x.WriteMinCapacity
	}
	return 0
}

func (x *AuditConfig) GetWriteTargetValue() float64 {
	if x != nil {
		return x.WriteTargetValue
	}
	return 0
}

// Namespace represents namespace resource specification
type Namespace struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is User metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a namespace spec
	Spec *NamespaceSpec `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *Namespace) Reset() {
	*x = Namespace{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Namespace) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Namespace) ProtoMessage() {}

func (x *Namespace) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Namespace.ProtoReflect.Descriptor instead.
func (*Namespace) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{28}
}

func (x *Namespace) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *Namespace) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *Namespace) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Namespace) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Namespace) GetSpec() *NamespaceSpec {
	if x != nil {
		return x.Spec
	}
	return nil
}

// NamespaceSpec is a namespace specificateion
type NamespaceSpec struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *NamespaceSpec) Reset() {
	*x = NamespaceSpec{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NamespaceSpec) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NamespaceSpec) ProtoMessage() {}

func (x *NamespaceSpec) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NamespaceSpec.ProtoReflect.Descriptor instead.
func (*NamespaceSpec) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{29}
}

type ResetPasswordTokenV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is ResetPasswordToken metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is an ResetPasswordToken specification
	Spec *ResetPasswordTokenSpecV3 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *ResetPasswordTokenV3) Reset() {
	*x = ResetPasswordTokenV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordTokenV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordTokenV3) ProtoMessage() {}

func (x *ResetPasswordTokenV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordTokenV3.ProtoReflect.Descriptor instead.
func (*ResetPasswordTokenV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{30}
}

func (x *ResetPasswordTokenV3) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResetPasswordTokenV3) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *ResetPasswordTokenV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ResetPasswordTokenV3) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResetPasswordTokenV3) GetSpec() *ResetPasswordTokenSpecV3 {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ResetPasswordTokenSpecV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User is user name associated with this token
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
	// URL is this token URL
	URL string `protobuf:"bytes,2,opt,name=URL,proto3" json:"URL,omitempty"`
	// Created holds information about when the token was created
	Created *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Created,proto3" json:"Created,omitempty"`
}

func (x *ResetPasswordTokenSpecV3) Reset() {
	*x = ResetPasswordTokenSpecV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordTokenSpecV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordTokenSpecV3) ProtoMessage() {}

func (x *ResetPasswordTokenSpecV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordTokenSpecV3.ProtoReflect.Descriptor instead.
func (*ResetPasswordTokenSpecV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{31}
}

func (x *ResetPasswordTokenSpecV3) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ResetPasswordTokenSpecV3) GetURL() string {
	if x != nil {
		return x.URL
	}
	return ""
}

func (x *ResetPasswordTokenSpecV3) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

type ResetPasswordTokenSecretsV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is ResetPasswordTokenSecrets metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is an ResetPasswordTokenSecrets specification
	Spec *ResetPasswordTokenSecretsSpecV3 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *ResetPasswordTokenSecretsV3) Reset() {
	*x = ResetPasswordTokenSecretsV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordTokenSecretsV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordTokenSecretsV3) ProtoMessage() {}

func (x *ResetPasswordTokenSecretsV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordTokenSecretsV3.ProtoReflect.Descriptor instead.
func (*ResetPasswordTokenSecretsV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{32}
}

func (x *ResetPasswordTokenSecretsV3) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ResetPasswordTokenSecretsV3) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *ResetPasswordTokenSecretsV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ResetPasswordTokenSecretsV3) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ResetPasswordTokenSecretsV3) GetSpec() *ResetPasswordTokenSecretsSpecV3 {
	if x != nil {
		return x.Spec
	}
	return nil
}

type ResetPasswordTokenSecretsSpecV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OTPKey is is a secret value of one time password secret generator
	OTPKey string `protobuf:"bytes,1,opt,name=OTPKey,proto3" json:"OTPKey,omitempty"`
	// OTPKey is is a secret value of one time password secret generator
	QRCode string `protobuf:"bytes,2,opt,name=QRCode,proto3" json:"QRCode,omitempty"`
	// Created holds information about when the token was created
	Created *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=Created,proto3" json:"Created,omitempty"`
}

func (x *ResetPasswordTokenSecretsSpecV3) Reset() {
	*x = ResetPasswordTokenSecretsSpecV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ResetPasswordTokenSecretsSpecV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ResetPasswordTokenSecretsSpecV3) ProtoMessage() {}

func (x *ResetPasswordTokenSecretsSpecV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ResetPasswordTokenSecretsSpecV3.ProtoReflect.Descriptor instead.
func (*ResetPasswordTokenSecretsSpecV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{33}
}

func (x *ResetPasswordTokenSecretsSpecV3) GetOTPKey() string {
	if x != nil {
		return x.OTPKey
	}
	return ""
}

func (x *ResetPasswordTokenSecretsSpecV3) GetQRCode() string {
	if x != nil {
		return x.QRCode
	}
	return ""
}

func (x *ResetPasswordTokenSecretsSpecV3) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

// AccessRequest represents an access request resource specification
type AccessRequestV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is AccessRequest metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is an AccessRequest specification
	Spec *AccessRequestSpecV3 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *AccessRequestV3) Reset() {
	*x = AccessRequestV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRequestV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequestV3) ProtoMessage() {}

func (x *AccessRequestV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequestV3.ProtoReflect.Descriptor instead.
func (*AccessRequestV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{34}
}

func (x *AccessRequestV3) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *AccessRequestV3) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *AccessRequestV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *AccessRequestV3) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *AccessRequestV3) GetSpec() *AccessRequestSpecV3 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// AccessRequestSpec is the specification for AccessRequest
type AccessRequestSpecV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User is the name of the user to whom the roles will be applied.
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
	// Roles is the name of the roles being requested.
	Roles []string `protobuf:"bytes,2,rep,name=Roles,proto3" json:"Roles,omitempty"`
	// State is the current state of this access request.
	State RequestState `protobuf:"varint,3,opt,name=State,proto3,enum=types.RequestState" json:"State,omitempty"`
	// Created encodes the time at which the request was registered with the auth
	// server.
	Created *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Created,proto3" json:"Created,omitempty"`
	// Expires constrains the maximum lifetime of any login session for which this
	// request is active.
	Expires *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Expires,proto3" json:"Expires,omitempty"`
	// RequestReason is an optional message explaining the reason for the request.
	RequestReason string `protobuf:"bytes,6,opt,name=RequestReason,proto3" json:"RequestReason,omitempty"`
	// ResolveReason is an optional message explaining the reason for the resolution
	// of the request (approval, denail, etc...).
	ResolveReason string `protobuf:"bytes,7,opt,name=ResolveReason,proto3" json:"ResolveReason,omitempty"`
	// ResolveAnnotations is a set of arbitrary values received from plugins or other
	// resolving parties during approval/denial.  Importantly, these annotations are
	// included in the access_request.update event, allowing plugins to propagate
	// arbitrary structured data to the audit log.
	ResolveAnnotations *wrappers.LabelValues `protobuf:"bytes,8,opt,name=ResolveAnnotations,proto3" json:"ResolveAnnotations,omitempty"`
	// SystemAnnotations is a set of programmatically generated annotations attached
	// to pending access requests by teleport.  These annotations are generated by
	// applying variable interpolation to the RoleConditions.Request.Annotations block
	// of a user's role(s).  These annotations serve as a mechanism for administrators
	// to pass extra information to plugins when they process pending access requests.
	SystemAnnotations *wrappers.LabelValues `protobuf:"bytes,9,opt,name=SystemAnnotations,proto3" json:"SystemAnnotations,omitempty"`
}

func (x *AccessRequestSpecV3) Reset() {
	*x = AccessRequestSpecV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRequestSpecV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequestSpecV3) ProtoMessage() {}

func (x *AccessRequestSpecV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequestSpecV3.ProtoReflect.Descriptor instead.
func (*AccessRequestSpecV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{35}
}

func (x *AccessRequestSpecV3) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AccessRequestSpecV3) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *AccessRequestSpecV3) GetState() RequestState {
	if x != nil {
		return x.State
	}
	return RequestState_NONE
}

func (x *AccessRequestSpecV3) GetCreated() *timestamppb.Timestamp {
	if x != nil {
		return x.Created
	}
	return nil
}

func (x *AccessRequestSpecV3) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *AccessRequestSpecV3) GetRequestReason() string {
	if x != nil {
		return x.RequestReason
	}
	return ""
}

func (x *AccessRequestSpecV3) GetResolveReason() string {
	if x != nil {
		return x.ResolveReason
	}
	return ""
}

func (x *AccessRequestSpecV3) GetResolveAnnotations() *wrappers.LabelValues {
	if x != nil {
		return x.ResolveAnnotations
	}
	return nil
}

func (x *AccessRequestSpecV3) GetSystemAnnotations() *wrappers.LabelValues {
	if x != nil {
		return x.SystemAnnotations
	}
	return nil
}

// AccessRequestFilter encodes filter params for access requests.
type AccessRequestFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ID specifies a request ID if set.
	ID string `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`
	// User specifies a username if set.
	User string `protobuf:"bytes,2,opt,name=User,proto3" json:"User,omitempty"`
	// RequestState filters for requests in a specific state.
	State RequestState `protobuf:"varint,3,opt,name=State,proto3,enum=types.RequestState" json:"State,omitempty"`
}

func (x *AccessRequestFilter) Reset() {
	*x = AccessRequestFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[36]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRequestFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequestFilter) ProtoMessage() {}

func (x *AccessRequestFilter) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[36]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequestFilter.ProtoReflect.Descriptor instead.
func (*AccessRequestFilter) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{36}
}

func (x *AccessRequestFilter) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *AccessRequestFilter) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AccessRequestFilter) GetState() RequestState {
	if x != nil {
		return x.State
	}
	return RequestState_NONE
}

// AccessCapabilities is a summary of capabilities that a user
// is granted via their dynamic access privileges which may not be
// calculable by directly examining the user's own static roles.
type AccessCapabilities struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// RequestableRoles is a list of existent roles which the user is allowed to request.
	RequestableRoles []string `protobuf:"bytes,1,rep,name=RequestableRoles,proto3" json:"RequestableRoles,omitempty"`
}

func (x *AccessCapabilities) Reset() {
	*x = AccessCapabilities{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[37]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessCapabilities) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessCapabilities) ProtoMessage() {}

func (x *AccessCapabilities) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[37]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessCapabilities.ProtoReflect.Descriptor instead.
func (*AccessCapabilities) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{37}
}

func (x *AccessCapabilities) GetRequestableRoles() []string {
	if x != nil {
		return x.RequestableRoles
	}
	return nil
}

// AccessCapabilitiesRequest encodes parameters for the GetAccessCapabilities method.
type AccessCapabilitiesRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User is the name of the user whose capabilities we are interested in (defaults to
	// the caller's own username).
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
	// RequestableRoles is a flag indicating that we would like to view the list of roles
	// that the user is able to request.
	RequestableRoles bool `protobuf:"varint,2,opt,name=RequestableRoles,proto3" json:"RequestableRoles,omitempty"`
}

func (x *AccessCapabilitiesRequest) Reset() {
	*x = AccessCapabilitiesRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[38]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessCapabilitiesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessCapabilitiesRequest) ProtoMessage() {}

func (x *AccessCapabilitiesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[38]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessCapabilitiesRequest.ProtoReflect.Descriptor instead.
func (*AccessCapabilitiesRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{38}
}

func (x *AccessCapabilitiesRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AccessCapabilitiesRequest) GetRequestableRoles() bool {
	if x != nil {
		return x.RequestableRoles
	}
	return false
}

// PluginData stores a collection of values associated with a specific resource.
type PluginDataV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is PluginData metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a PluginData specification
	Spec *PluginDataSpecV3 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *PluginDataV3) Reset() {
	*x = PluginDataV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[39]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginDataV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginDataV3) ProtoMessage() {}

func (x *PluginDataV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[39]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginDataV3.ProtoReflect.Descriptor instead.
func (*PluginDataV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{39}
}

func (x *PluginDataV3) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PluginDataV3) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *PluginDataV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *PluginDataV3) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *PluginDataV3) GetSpec() *PluginDataSpecV3 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// PluginDataEntry wraps a mapping of arbitrary string values used by
// plugins to store per-resource information.
type PluginDataEntry struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Data is a mapping of arbitrary string values.
	Data map[string]string `protobuf:"bytes,1,rep,name=Data,proto3" json:"Data,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PluginDataEntry) Reset() {
	*x = PluginDataEntry{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[40]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginDataEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginDataEntry) ProtoMessage() {}

func (x *PluginDataEntry) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[40]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginDataEntry.ProtoReflect.Descriptor instead.
func (*PluginDataEntry) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{40}
}

func (x *PluginDataEntry) GetData() map[string]string {
	if x != nil {
		return x.Data
	}
	return nil
}

// PluginData stores a collection of values associated with a specific resource.
type PluginDataSpecV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Entries is a collection of PluginData values organized by plugin name.
	Entries map[string]*PluginDataEntry `protobuf:"bytes,1,rep,name=Entries,proto3" json:"Entries,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PluginDataSpecV3) Reset() {
	*x = PluginDataSpecV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[41]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginDataSpecV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginDataSpecV3) ProtoMessage() {}

func (x *PluginDataSpecV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[41]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginDataSpecV3.ProtoReflect.Descriptor instead.
func (*PluginDataSpecV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{41}
}

func (x *PluginDataSpecV3) GetEntries() map[string]*PluginDataEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

// PluginDataFilter encodes filter params for plugin data.
type PluginDataFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is the kind of resource that the target plugin data
	// is associated with.
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// Resource matches a specific resource name if set.
	Resource string `protobuf:"bytes,2,opt,name=Resource,proto3" json:"Resource,omitempty"`
	// Plugin matches a specific plugin name if set.
	Plugin string `protobuf:"bytes,3,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
}

func (x *PluginDataFilter) Reset() {
	*x = PluginDataFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[42]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginDataFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginDataFilter) ProtoMessage() {}

func (x *PluginDataFilter) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[42]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginDataFilter.ProtoReflect.Descriptor instead.
func (*PluginDataFilter) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{42}
}

func (x *PluginDataFilter) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PluginDataFilter) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *PluginDataFilter) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

// PluginDataUpdateParams encodes paramers for updating a PluginData field.
type PluginDataUpdateParams struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is the kind of resource that the target plugin data
	// is associated with.
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// Resource indicates the name of the target resource.
	Resource string `protobuf:"bytes,2,opt,name=Resource,proto3" json:"Resource,omitempty"`
	// Plugin is the name of the plugin that owns the data.
	Plugin string `protobuf:"bytes,3,opt,name=Plugin,proto3" json:"Plugin,omitempty"`
	// Set indicates the fields which should be set by this operation.
	Set map[string]string `protobuf:"bytes,4,rep,name=Set,proto3" json:"Set,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// Expect optionally indicates the expected state of fields prior to this update.
	Expect map[string]string `protobuf:"bytes,5,rep,name=Expect,proto3" json:"Expect,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *PluginDataUpdateParams) Reset() {
	*x = PluginDataUpdateParams{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[43]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluginDataUpdateParams) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluginDataUpdateParams) ProtoMessage() {}

func (x *PluginDataUpdateParams) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[43]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluginDataUpdateParams.ProtoReflect.Descriptor instead.
func (*PluginDataUpdateParams) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{43}
}

func (x *PluginDataUpdateParams) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *PluginDataUpdateParams) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *PluginDataUpdateParams) GetPlugin() string {
	if x != nil {
		return x.Plugin
	}
	return ""
}

func (x *PluginDataUpdateParams) GetSet() map[string]string {
	if x != nil {
		return x.Set
	}
	return nil
}

func (x *PluginDataUpdateParams) GetExpect() map[string]string {
	if x != nil {
		return x.Expect
	}
	return nil
}

// RoleV3 represents role resource specification
type RoleV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is User metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a role specification
	Spec *RoleSpecV3 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *RoleV3) Reset() {
	*x = RoleV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[44]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleV3) ProtoMessage() {}

func (x *RoleV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[44]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleV3.ProtoReflect.Descriptor instead.
func (*RoleV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{44}
}

func (x *RoleV3) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RoleV3) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *RoleV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RoleV3) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RoleV3) GetSpec() *RoleSpecV3 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// RoleSpecV3 is role specification for RoleV3.
type RoleSpecV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Options is for OpenSSH options like agent forwarding.
	Options *RoleOptions `protobuf:"bytes,1,opt,name=Options,proto3" json:"Options,omitempty"`
	// Allow is the set of conditions evaluated to grant access.
	Allow *RoleConditions `protobuf:"bytes,2,opt,name=Allow,proto3" json:"Allow,omitempty"`
	// Deny is the set of conditions evaluated to deny access. Deny takes priority
	// over allow.
	Deny *RoleConditions `protobuf:"bytes,3,opt,name=Deny,proto3" json:"Deny,omitempty"`
}

func (x *RoleSpecV3) Reset() {
	*x = RoleSpecV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[45]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleSpecV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleSpecV3) ProtoMessage() {}

func (x *RoleSpecV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[45]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleSpecV3.ProtoReflect.Descriptor instead.
func (*RoleSpecV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{45}
}

func (x *RoleSpecV3) GetOptions() *RoleOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *RoleSpecV3) GetAllow() *RoleConditions {
	if x != nil {
		return x.Allow
	}
	return nil
}

func (x *RoleSpecV3) GetDeny() *RoleConditions {
	if x != nil {
		return x.Deny
	}
	return nil
}

// RoleOptions is a set of role options
type RoleOptions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ForwardAgent is SSH agent forwarding.
	ForwardAgent bool `protobuf:"varint,1,opt,name=ForwardAgent,proto3" json:"ForwardAgent,omitempty"`
	// MaxSessionTTL defines how long a SSH session can last for.
	MaxSessionTTL int64 `protobuf:"varint,2,opt,name=MaxSessionTTL,proto3" json:"MaxSessionTTL,omitempty"`
	// PortForwarding defines if the certificate will have
	// "permit-port-forwarding"
	// in the certificate. PortForwarding is "yes" if not set,
	// that's why this is a pointer
	PortForwarding *BoolValue `protobuf:"bytes,3,opt,name=PortForwarding,proto3" json:"PortForwarding,omitempty"`
	// CertificateFormat defines the format of the user certificate to allow
	// compatibility with older versions of OpenSSH.
	CertificateFormat string `protobuf:"bytes,4,opt,name=CertificateFormat,proto3" json:"CertificateFormat,omitempty"`
	// ClientIdleTimeout sets disconnect clients on idle timeout behavior,
	// if set to 0 means do not disconnect, otherwise is set to the idle
	// duration.
	ClientIdleTimeout int64 `protobuf:"varint,5,opt,name=ClientIdleTimeout,proto3" json:"ClientIdleTimeout,omitempty"`
	// DisconnectExpiredCert sets disconnect clients on expired certificates.
	DisconnectExpiredCert bool `protobuf:"varint,6,opt,name=DisconnectExpiredCert,proto3" json:"DisconnectExpiredCert,omitempty"`
	// BPF defines what events to record for the BPF-based session recorder.
	BPF []string `protobuf:"bytes,7,rep,name=BPF,proto3" json:"BPF,omitempty"`
	// PermitX11Forwarding authorizes use of X11 forwarding.
	PermitX11Forwarding bool `protobuf:"varint,8,opt,name=PermitX11Forwarding,proto3" json:"PermitX11Forwarding,omitempty"`
	// MaxConnections defines the maximum number of
	// concurrent connections a user may hold.
	MaxConnections int64 `protobuf:"varint,9,opt,name=MaxConnections,proto3" json:"MaxConnections,omitempty"`
	// MaxSessions defines the maximum number of
	// concurrent sessions per connection.
	MaxSessions int64 `protobuf:"varint,10,opt,name=MaxSessions,proto3" json:"MaxSessions,omitempty"`
	// RequestAccess defines the access request stategy (optional|note|always)
	// where optional is the default.
	RequestAccess string `protobuf:"bytes,11,opt,name=RequestAccess,proto3" json:"RequestAccess,omitempty"`
	// RequestPrompt is an optional message which tells users what they aught to
	RequestPrompt string `protobuf:"bytes,12,opt,name=RequestPrompt,proto3" json:"RequestPrompt,omitempty"`
}

func (x *RoleOptions) Reset() {
	*x = RoleOptions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[46]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleOptions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleOptions) ProtoMessage() {}

func (x *RoleOptions) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[46]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleOptions.ProtoReflect.Descriptor instead.
func (*RoleOptions) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{46}
}

func (x *RoleOptions) GetForwardAgent() bool {
	if x != nil {
		return x.ForwardAgent
	}
	return false
}

func (x *RoleOptions) GetMaxSessionTTL() int64 {
	if x != nil {
		return x.MaxSessionTTL
	}
	return 0
}

func (x *RoleOptions) GetPortForwarding() *BoolValue {
	if x != nil {
		return x.PortForwarding
	}
	return nil
}

func (x *RoleOptions) GetCertificateFormat() string {
	if x != nil {
		return x.CertificateFormat
	}
	return ""
}

func (x *RoleOptions) GetClientIdleTimeout() int64 {
	if x != nil {
		return x.ClientIdleTimeout
	}
	return 0
}

func (x *RoleOptions) GetDisconnectExpiredCert() bool {
	if x != nil {
		return x.DisconnectExpiredCert
	}
	return false
}

func (x *RoleOptions) GetBPF() []string {
	if x != nil {
		return x.BPF
	}
	return nil
}

func (x *RoleOptions) GetPermitX11Forwarding() bool {
	if x != nil {
		return x.PermitX11Forwarding
	}
	return false
}

func (x *RoleOptions) GetMaxConnections() int64 {
	if x != nil {
		return x.MaxConnections
	}
	return 0
}

func (x *RoleOptions) GetMaxSessions() int64 {
	if x != nil {
		return x.MaxSessions
	}
	return 0
}

func (x *RoleOptions) GetRequestAccess() string {
	if x != nil {
		return x.RequestAccess
	}
	return ""
}

func (x *RoleOptions) GetRequestPrompt() string {
	if x != nil {
		return x.RequestPrompt
	}
	return ""
}

// RoleConditions is a set of conditions that must all match to be allowed or
// denied access.
type RoleConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Logins is a list of *nix system logins.
	Logins []string `protobuf:"bytes,1,rep,name=Logins,proto3" json:"Logins,omitempty"`
	// Namespaces is a list of namespaces (used to partition a cluster). The
	// field should be called "namespaces" when it returns in Teleport 2.4.
	Namespaces []string `protobuf:"bytes,2,rep,name=Namespaces,proto3" json:"Namespaces,omitempty"`
	// NodeLabels is a map of node labels (used to dynamically grant access to
	// nodes).
	NodeLabels *wrappers.LabelValues `protobuf:"bytes,3,opt,name=NodeLabels,proto3" json:"NodeLabels,omitempty"`
	// Rules is a list of rules and their access levels. Rules are a high level
	// construct used for access control.
	Rules []*Rule `protobuf:"bytes,4,rep,name=Rules,proto3" json:"Rules,omitempty"`
	// KubeGroups is a list of kubernetes groups
	KubeGroups []string                 `protobuf:"bytes,5,rep,name=KubeGroups,proto3" json:"KubeGroups,omitempty"`
	Request    *AccessRequestConditions `protobuf:"bytes,6,opt,name=Request,proto3" json:"Request,omitempty"`
	// KubeUsers is an optional kubernetes users to impersonate
	KubeUsers []string `protobuf:"bytes,7,rep,name=KubeUsers,proto3" json:"KubeUsers,omitempty"`
	// AppLabels is a map of labels used as part of the RBAC system.
	AppLabels *wrappers.LabelValues `protobuf:"bytes,8,opt,name=AppLabels,proto3" json:"AppLabels,omitempty"`
	// ClusterLabels is a map of node labels (used to dynamically grant access to
	// clusters).
	ClusterLabels *wrappers.LabelValues `protobuf:"bytes,9,opt,name=ClusterLabels,proto3" json:"ClusterLabels,omitempty"`
	// KubernetesLabels is a map of kubernetes cluster labels used for RBAC.
	KubernetesLabels *wrappers.LabelValues `protobuf:"bytes,10,opt,name=KubernetesLabels,proto3" json:"KubernetesLabels,omitempty"`
	// DatabaseLabels are used in RBAC system to allow/deny access to databases.
	DatabaseLabels *wrappers.LabelValues `protobuf:"bytes,11,opt,name=DatabaseLabels,proto3" json:"DatabaseLabels,omitempty"`
	// DatabaseNames is a list of database names this role is allowed to connect to.
	DatabaseNames []string `protobuf:"bytes,12,rep,name=DatabaseNames,proto3" json:"DatabaseNames,omitempty"`
	// DatabaseUsers is a list of databaes users this role is allowed to connect as.
	DatabaseUsers []string `protobuf:"bytes,13,rep,name=DatabaseUsers,proto3" json:"DatabaseUsers,omitempty"`
}

func (x *RoleConditions) Reset() {
	*x = RoleConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[47]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RoleConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RoleConditions) ProtoMessage() {}

func (x *RoleConditions) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[47]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RoleConditions.ProtoReflect.Descriptor instead.
func (*RoleConditions) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{47}
}

func (x *RoleConditions) GetLogins() []string {
	if x != nil {
		return x.Logins
	}
	return nil
}

func (x *RoleConditions) GetNamespaces() []string {
	if x != nil {
		return x.Namespaces
	}
	return nil
}

func (x *RoleConditions) GetNodeLabels() *wrappers.LabelValues {
	if x != nil {
		return x.NodeLabels
	}
	return nil
}

func (x *RoleConditions) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *RoleConditions) GetKubeGroups() []string {
	if x != nil {
		return x.KubeGroups
	}
	return nil
}

func (x *RoleConditions) GetRequest() *AccessRequestConditions {
	if x != nil {
		return x.Request
	}
	return nil
}

func (x *RoleConditions) GetKubeUsers() []string {
	if x != nil {
		return x.KubeUsers
	}
	return nil
}

func (x *RoleConditions) GetAppLabels() *wrappers.LabelValues {
	if x != nil {
		return x.AppLabels
	}
	return nil
}

func (x *RoleConditions) GetClusterLabels() *wrappers.LabelValues {
	if x != nil {
		return x.ClusterLabels
	}
	return nil
}

func (x *RoleConditions) GetKubernetesLabels() *wrappers.LabelValues {
	if x != nil {
		return x.KubernetesLabels
	}
	return nil
}

func (x *RoleConditions) GetDatabaseLabels() *wrappers.LabelValues {
	if x != nil {
		return x.DatabaseLabels
	}
	return nil
}

func (x *RoleConditions) GetDatabaseNames() []string {
	if x != nil {
		return x.DatabaseNames
	}
	return nil
}

func (x *RoleConditions) GetDatabaseUsers() []string {
	if x != nil {
		return x.DatabaseUsers
	}
	return nil
}

// AccessRequestConditions is a matcher for allow/deny restrictions on
// access-requests.
type AccessRequestConditions struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Roles is the name of roles which will match the request rule.
	Roles []string `protobuf:"bytes,1,rep,name=Roles,proto3" json:"Roles,omitempty"`
	// ClaimsToRoles specifies a mapping from claims (traits) to teleport roles.
	ClaimsToRoles []*AccessRequestClaimMapping `protobuf:"bytes,2,rep,name=ClaimsToRoles,proto3" json:"ClaimsToRoles,omitempty"`
	// Annotations is a collection of annotations to be programmatically
	// appended to pending access requests at the time of their creation.
	// These annotations serve as a mechanism to propagate extra information
	// to plugins.  Since these annotations support variable interpolation
	// syntax, they also offer a mechanism for forwarding claims from an
	// external identity provider, to a plugin via `{{external.trait_name}}`
	// style substitutions.
	Annotations *wrappers.LabelValues `protobuf:"bytes,3,opt,name=Annotations,proto3" json:"Annotations,omitempty"`
}

func (x *AccessRequestConditions) Reset() {
	*x = AccessRequestConditions{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[48]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRequestConditions) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequestConditions) ProtoMessage() {}

func (x *AccessRequestConditions) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[48]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequestConditions.ProtoReflect.Descriptor instead.
func (*AccessRequestConditions) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{48}
}

func (x *AccessRequestConditions) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *AccessRequestConditions) GetClaimsToRoles() []*AccessRequestClaimMapping {
	if x != nil {
		return x.ClaimsToRoles
	}
	return nil
}

func (x *AccessRequestConditions) GetAnnotations() *wrappers.LabelValues {
	if x != nil {
		return x.Annotations
	}
	return nil
}

// AccessRequestClaimMapping is a variant of the trait mapping pattern,
// used to propagate requestable roles from external identity providers.
type AccessRequestClaimMapping struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Claim is the name of the trait to be matched against.
	Claim string `protobuf:"bytes,1,opt,name=Claim,proto3" json:"Claim,omitempty"`
	// Value is matches a trait value.
	Value string `protobuf:"bytes,2,opt,name=Value,proto3" json:"Value,omitempty"`
	// Roles are the roles being mapped to.
	Roles []string `protobuf:"bytes,3,rep,name=Roles,proto3" json:"Roles,omitempty"`
}

func (x *AccessRequestClaimMapping) Reset() {
	*x = AccessRequestClaimMapping{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[49]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AccessRequestClaimMapping) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AccessRequestClaimMapping) ProtoMessage() {}

func (x *AccessRequestClaimMapping) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[49]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AccessRequestClaimMapping.ProtoReflect.Descriptor instead.
func (*AccessRequestClaimMapping) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{49}
}

func (x *AccessRequestClaimMapping) GetClaim() string {
	if x != nil {
		return x.Claim
	}
	return ""
}

func (x *AccessRequestClaimMapping) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

func (x *AccessRequestClaimMapping) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

// Rule represents allow or deny rule that is executed to check
// if user or service have access to resource
type Rule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Resources is a list of resources
	Resources []string `protobuf:"bytes,1,rep,name=Resources,proto3" json:"Resources,omitempty"`
	// Verbs is a list of verbs
	Verbs []string `protobuf:"bytes,2,rep,name=Verbs,proto3" json:"Verbs,omitempty"`
	// Where specifies optional advanced matcher
	Where string `protobuf:"bytes,3,opt,name=Where,proto3" json:"Where,omitempty"`
	// Actions specifies optional actions taken when this rule matches
	Actions []string `protobuf:"bytes,4,rep,name=Actions,proto3" json:"Actions,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[50]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Rule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Rule) ProtoMessage() {}

func (x *Rule) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[50]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Rule.ProtoReflect.Descriptor instead.
func (*Rule) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{50}
}

func (x *Rule) GetResources() []string {
	if x != nil {
		return x.Resources
	}
	return nil
}

func (x *Rule) GetVerbs() []string {
	if x != nil {
		return x.Verbs
	}
	return nil
}

func (x *Rule) GetWhere() string {
	if x != nil {
		return x.Where
	}
	return ""
}

func (x *Rule) GetActions() []string {
	if x != nil {
		return x.Actions
	}
	return nil
}

// BoolValue is a wrapper around bool, used in cases
// whenever bool value can have different default value when missing
type BoolValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=Value,proto3" json:"Value,omitempty"`
}

func (x *BoolValue) Reset() {
	*x = BoolValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[51]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolValue) ProtoMessage() {}

func (x *BoolValue) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[51]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolValue.ProtoReflect.Descriptor instead.
func (*BoolValue) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{51}
}

func (x *BoolValue) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

// UserV2 is version 2 resource spec of the user
type UserV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is User metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a user specification
	Spec *UserSpecV2 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *UserV2) Reset() {
	*x = UserV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[52]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserV2) ProtoMessage() {}

func (x *UserV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[52]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserV2.ProtoReflect.Descriptor instead.
func (*UserV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{52}
}

func (x *UserV2) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *UserV2) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *UserV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *UserV2) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *UserV2) GetSpec() *UserSpecV2 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// UserSpecV2 is a specification for V2 user
type UserSpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// OIDCIdentities lists associated OpenID Connect identities
	// that let user log in using externally verified identity
	OIDCIdentities []*ExternalIdentity `protobuf:"bytes,1,rep,name=OIDCIdentities,proto3" json:"OIDCIdentities,omitempty"`
	// SAMLIdentities lists associated SAML identities
	// that let user log in using externally verified identity
	SAMLIdentities []*ExternalIdentity `protobuf:"bytes,2,rep,name=SAMLIdentities,proto3" json:"SAMLIdentities,omitempty"`
	// GithubIdentities list associated Github OAuth2 identities
	// that let user log in using externally verified identity
	GithubIdentities []*ExternalIdentity `protobuf:"bytes,3,rep,name=GithubIdentities,proto3" json:"GithubIdentities,omitempty"`
	// Roles is a list of roles assigned to user
	Roles []string `protobuf:"bytes,4,rep,name=Roles,proto3" json:"Roles,omitempty"`
	// Traits are key/value pairs received from an identity provider (through
	// OIDC claims or SAML assertions) or from a system administrator for local
	// accounts. Traits are used to populate role variables.
	Traits *wrappers.LabelValues `protobuf:"bytes,5,opt,name=Traits,proto3" json:"Traits,omitempty"`
	// Status is a login status of the user
	Status *LoginStatus `protobuf:"bytes,6,opt,name=Status,proto3" json:"Status,omitempty"`
	// Expires if set sets TTL on the user
	Expires *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=Expires,proto3" json:"Expires,omitempty"`
	// CreatedBy holds information about agent or person created this user
	CreatedBy *CreatedBy `protobuf:"bytes,8,opt,name=CreatedBy,proto3" json:"CreatedBy,omitempty"`
	// LocalAuths hold sensitive data necessary for performing local
	// authentication
	LocalAuth *LocalAuthSecrets `protobuf:"bytes,9,opt,name=LocalAuth,proto3" json:"LocalAuth,omitempty"`
}

func (x *UserSpecV2) Reset() {
	*x = UserSpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[53]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSpecV2) ProtoMessage() {}

func (x *UserSpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[53]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSpecV2.ProtoReflect.Descriptor instead.
func (*UserSpecV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{53}
}

func (x *UserSpecV2) GetOIDCIdentities() []*ExternalIdentity {
	if x != nil {
		return x.OIDCIdentities
	}
	return nil
}

func (x *UserSpecV2) GetSAMLIdentities() []*ExternalIdentity {
	if x != nil {
		return x.SAMLIdentities
	}
	return nil
}

func (x *UserSpecV2) GetGithubIdentities() []*ExternalIdentity {
	if x != nil {
		return x.GithubIdentities
	}
	return nil
}

func (x *UserSpecV2) GetRoles() []string {
	if x != nil {
		return x.Roles
	}
	return nil
}

func (x *UserSpecV2) GetTraits() *wrappers.LabelValues {
	if x != nil {
		return x.Traits
	}
	return nil
}

func (x *UserSpecV2) GetStatus() *LoginStatus {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *UserSpecV2) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *UserSpecV2) GetCreatedBy() *CreatedBy {
	if x != nil {
		return x.CreatedBy
	}
	return nil
}

func (x *UserSpecV2) GetLocalAuth() *LocalAuthSecrets {
	if x != nil {
		return x.LocalAuth
	}
	return nil
}

// ExternalIdentity is OpenID Connect/SAML or Github identity that is linked
// to particular user and connector and lets user to log in using external
// credentials, e.g. google
type ExternalIdentity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ConnectorID is id of registered OIDC connector, e.g. 'google-example.com'
	ConnectorID string `protobuf:"bytes,1,opt,name=ConnectorID,proto3" json:"ConnectorID,omitempty"`
	// Username is username supplied by external identity provider
	Username string `protobuf:"bytes,2,opt,name=Username,proto3" json:"Username,omitempty"`
}

func (x *ExternalIdentity) Reset() {
	*x = ExternalIdentity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[54]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExternalIdentity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExternalIdentity) ProtoMessage() {}

func (x *ExternalIdentity) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[54]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExternalIdentity.ProtoReflect.Descriptor instead.
func (*ExternalIdentity) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{54}
}

func (x *ExternalIdentity) GetConnectorID() string {
	if x != nil {
		return x.ConnectorID
	}
	return ""
}

func (x *ExternalIdentity) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

// LoginStatus is a login status of the user
type LoginStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// IsLocked tells us if user is locked
	IsLocked bool `protobuf:"varint,1,opt,name=IsLocked,proto3" json:"IsLocked,omitempty"`
	// LockedMessage contains the message in case if user is locked
	LockedMessage string `protobuf:"bytes,2,opt,name=LockedMessage,proto3" json:"LockedMessage,omitempty"`
	// LockedTime contains time when user was locked
	LockedTime *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LockedTime,proto3" json:"LockedTime,omitempty"`
	// LockExpires contains time when this lock will expire
	LockExpires *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=LockExpires,proto3" json:"LockExpires,omitempty"`
}

func (x *LoginStatus) Reset() {
	*x = LoginStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[55]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginStatus) ProtoMessage() {}

func (x *LoginStatus) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[55]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginStatus.ProtoReflect.Descriptor instead.
func (*LoginStatus) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{55}
}

func (x *LoginStatus) GetIsLocked() bool {
	if x != nil {
		return x.IsLocked
	}
	return false
}

func (x *LoginStatus) GetLockedMessage() string {
	if x != nil {
		return x.LockedMessage
	}
	return ""
}

func (x *LoginStatus) GetLockedTime() *timestamppb.Timestamp {
	if x != nil {
		return x.LockedTime
	}
	return nil
}

func (x *LoginStatus) GetLockExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.LockExpires
	}
	return nil
}

// CreatedBy holds information about the person or agent who created the user
type CreatedBy struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Identity if present means that user was automatically created by identity
	Connector *ConnectorRef `protobuf:"bytes,1,opt,name=Connector,proto3" json:"Connector,omitempty"`
	// Time specifies when user was created
	Time *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Time,proto3" json:"Time,omitempty"`
	// User holds information about user
	User *UserRef `protobuf:"bytes,3,opt,name=User,proto3" json:"User,omitempty"`
}

func (x *CreatedBy) Reset() {
	*x = CreatedBy{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[56]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CreatedBy) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CreatedBy) ProtoMessage() {}

func (x *CreatedBy) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[56]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CreatedBy.ProtoReflect.Descriptor instead.
func (*CreatedBy) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{56}
}

func (x *CreatedBy) GetConnector() *ConnectorRef {
	if x != nil {
		return x.Connector
	}
	return nil
}

func (x *CreatedBy) GetTime() *timestamppb.Timestamp {
	if x != nil {
		return x.Time
	}
	return nil
}

func (x *CreatedBy) GetUser() *UserRef {
	if x != nil {
		return x.User
	}
	return nil
}

// U2FRegistrationData encodes the universal second factor registration payload.
type U2FRegistrationData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Raw is the serialized registration data as received from the token
	Raw []byte `protobuf:"bytes,1,opt,name=Raw,proto3" json:"Raw,omitempty"`
	// KeyHandle uniquely identifies a key on a device
	KeyHandle []byte `protobuf:"bytes,2,opt,name=KeyHandle,proto3" json:"KeyHandle,omitempty"`
	// PubKey is an DER encoded ecdsa public key
	PubKey []byte `protobuf:"bytes,3,opt,name=PubKey,proto3" json:"PubKey,omitempty"`
}

func (x *U2FRegistrationData) Reset() {
	*x = U2FRegistrationData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[57]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *U2FRegistrationData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*U2FRegistrationData) ProtoMessage() {}

func (x *U2FRegistrationData) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[57]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use U2FRegistrationData.ProtoReflect.Descriptor instead.
func (*U2FRegistrationData) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{57}
}

func (x *U2FRegistrationData) GetRaw() []byte {
	if x != nil {
		return x.Raw
	}
	return nil
}

func (x *U2FRegistrationData) GetKeyHandle() []byte {
	if x != nil {
		return x.KeyHandle
	}
	return nil
}

func (x *U2FRegistrationData) GetPubKey() []byte {
	if x != nil {
		return x.PubKey
	}
	return nil
}

// LocalAuthSecrets holds sensitive data used to authenticate a local user.
type LocalAuthSecrets struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// PasswordHash encodes a combined salt & hash for password verification.
	PasswordHash []byte `protobuf:"bytes,1,opt,name=PasswordHash,proto3" json:"PasswordHash,omitempty"`
	// TOTPKey is the key used for Time-based One Time Password varification.
	TOTPKey string `protobuf:"bytes,2,opt,name=TOTPKey,proto3" json:"TOTPKey,omitempty"`
	// U2FRegistration holds Universal Second Factor registration info.
	U2FRegistration *U2FRegistrationData `protobuf:"bytes,3,opt,name=U2FRegistration,proto3" json:"U2FRegistration,omitempty"`
	// U2FCounter holds the highest seen Universal Second Factor registration
	// count.
	U2FCounter uint32 `protobuf:"varint,4,opt,name=U2FCounter,proto3" json:"U2FCounter,omitempty"`
}

func (x *LocalAuthSecrets) Reset() {
	*x = LocalAuthSecrets{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[58]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LocalAuthSecrets) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LocalAuthSecrets) ProtoMessage() {}

func (x *LocalAuthSecrets) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[58]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LocalAuthSecrets.ProtoReflect.Descriptor instead.
func (*LocalAuthSecrets) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{58}
}

func (x *LocalAuthSecrets) GetPasswordHash() []byte {
	if x != nil {
		return x.PasswordHash
	}
	return nil
}

func (x *LocalAuthSecrets) GetTOTPKey() string {
	if x != nil {
		return x.TOTPKey
	}
	return ""
}

func (x *LocalAuthSecrets) GetU2FRegistration() *U2FRegistrationData {
	if x != nil {
		return x.U2FRegistration
	}
	return nil
}

func (x *LocalAuthSecrets) GetU2FCounter() uint32 {
	if x != nil {
		return x.U2FCounter
	}
	return 0
}

// ConnectorRef holds information about OIDC connector
type ConnectorRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Type is connector type
	Type string `protobuf:"bytes,1,opt,name=Type,proto3" json:"Type,omitempty"`
	// ID is connector ID
	ID string `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`
	// Identity is external identity of the user
	Identity string `protobuf:"bytes,3,opt,name=Identity,proto3" json:"Identity,omitempty"`
}

func (x *ConnectorRef) Reset() {
	*x = ConnectorRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[59]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConnectorRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConnectorRef) ProtoMessage() {}

func (x *ConnectorRef) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[59]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConnectorRef.ProtoReflect.Descriptor instead.
func (*ConnectorRef) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{59}
}

func (x *ConnectorRef) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

func (x *ConnectorRef) GetID() string {
	if x != nil {
		return x.ID
	}
	return ""
}

func (x *ConnectorRef) GetIdentity() string {
	if x != nil {
		return x.Identity
	}
	return ""
}

// UserRef holds references to user
type UserRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is name of the user
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *UserRef) Reset() {
	*x = UserRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[60]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserRef) ProtoMessage() {}

func (x *UserRef) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[60]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserRef.ProtoReflect.Descriptor instead.
func (*UserRef) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{60}
}

func (x *UserRef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// ReverseTunnelV2 is version 2 of the resource spec of the reverse tunnel
type ReverseTunnelV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is a resource metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a reverse tunnel specification
	Spec *ReverseTunnelSpecV2 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *ReverseTunnelV2) Reset() {
	*x = ReverseTunnelV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[61]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseTunnelV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseTunnelV2) ProtoMessage() {}

func (x *ReverseTunnelV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[61]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseTunnelV2.ProtoReflect.Descriptor instead.
func (*ReverseTunnelV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{61}
}

func (x *ReverseTunnelV2) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *ReverseTunnelV2) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *ReverseTunnelV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *ReverseTunnelV2) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ReverseTunnelV2) GetSpec() *ReverseTunnelSpecV2 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// ReverseTunnelSpecV2 is a specification for V2 reverse tunnel
type ReverseTunnelSpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClusterName is a domain name of remote cluster we are connecting to
	ClusterName string `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	// DialAddrs is a list of remote address to establish a connection to
	// it's always SSH over TCP
	DialAddrs []string `protobuf:"bytes,2,rep,name=DialAddrs,proto3" json:"DialAddrs,omitempty"`
	// Type is the type of reverse tunnel, either proxy or node.
	Type string `protobuf:"bytes,3,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *ReverseTunnelSpecV2) Reset() {
	*x = ReverseTunnelSpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[62]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ReverseTunnelSpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReverseTunnelSpecV2) ProtoMessage() {}

func (x *ReverseTunnelSpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[62]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReverseTunnelSpecV2.ProtoReflect.Descriptor instead.
func (*ReverseTunnelSpecV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{62}
}

func (x *ReverseTunnelSpecV2) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *ReverseTunnelSpecV2) GetDialAddrs() []string {
	if x != nil {
		return x.DialAddrs
	}
	return nil
}

func (x *ReverseTunnelSpecV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// TunnelConnectionV2 is version 2 of the resource spec of the tunnel connection
type TunnelConnectionV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is a resource metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a tunnel specification
	Spec *TunnelConnectionSpecV2 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *TunnelConnectionV2) Reset() {
	*x = TunnelConnectionV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[63]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelConnectionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelConnectionV2) ProtoMessage() {}

func (x *TunnelConnectionV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[63]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelConnectionV2.ProtoReflect.Descriptor instead.
func (*TunnelConnectionV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{63}
}

func (x *TunnelConnectionV2) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *TunnelConnectionV2) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *TunnelConnectionV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *TunnelConnectionV2) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *TunnelConnectionV2) GetSpec() *TunnelConnectionSpecV2 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// TunnelConnectionSpecV2 is a specification for V2 tunnel connection
type TunnelConnectionSpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// ClusterName is a name of the cluster
	ClusterName string `protobuf:"bytes,1,opt,name=ClusterName,proto3" json:"ClusterName,omitempty"`
	// ProxyName is the name of the proxy server
	ProxyName string `protobuf:"bytes,2,opt,name=ProxyName,proto3" json:"ProxyName,omitempty"`
	// LastHeartbeat is a time of the last heartbeat
	LastHeartbeat *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=LastHeartbeat,proto3" json:"LastHeartbeat,omitempty"`
	// Type is the type of reverse tunnel, either proxy or node.
	Type string `protobuf:"bytes,4,opt,name=Type,proto3" json:"Type,omitempty"`
}

func (x *TunnelConnectionSpecV2) Reset() {
	*x = TunnelConnectionSpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[64]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelConnectionSpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelConnectionSpecV2) ProtoMessage() {}

func (x *TunnelConnectionSpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[64]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelConnectionSpecV2.ProtoReflect.Descriptor instead.
func (*TunnelConnectionSpecV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{64}
}

func (x *TunnelConnectionSpecV2) GetClusterName() string {
	if x != nil {
		return x.ClusterName
	}
	return ""
}

func (x *TunnelConnectionSpecV2) GetProxyName() string {
	if x != nil {
		return x.ProxyName
	}
	return ""
}

func (x *TunnelConnectionSpecV2) GetLastHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeat
	}
	return nil
}

func (x *TunnelConnectionSpecV2) GetType() string {
	if x != nil {
		return x.Type
	}
	return ""
}

// SemaphoreFilter encodes semaphore filtering params.
// A semaphore filter matches a semaphore if all nonzero fields
// match the corresponding semaphore fileds (e.g. a filter which
// specifies only `kind=foo` would match all semaphores of
// kind `foo`).
type SemaphoreFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SemaphoreKind is the kind of the semaphore.
	SemaphoreKind string `protobuf:"bytes,1,opt,name=SemaphoreKind,proto3" json:"SemaphoreKind,omitempty"`
	// SemaphoreName is the name of the semaphore.
	SemaphoreName string `protobuf:"bytes,2,opt,name=SemaphoreName,proto3" json:"SemaphoreName,omitempty"`
}

func (x *SemaphoreFilter) Reset() {
	*x = SemaphoreFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[65]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemaphoreFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreFilter) ProtoMessage() {}

func (x *SemaphoreFilter) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[65]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreFilter.ProtoReflect.Descriptor instead.
func (*SemaphoreFilter) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{65}
}

func (x *SemaphoreFilter) GetSemaphoreKind() string {
	if x != nil {
		return x.SemaphoreKind
	}
	return ""
}

func (x *SemaphoreFilter) GetSemaphoreName() string {
	if x != nil {
		return x.SemaphoreName
	}
	return ""
}

// AcquireSemaphoreRequest holds semaphore lease acquisition parameters.
type AcquireSemaphoreRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SemaphoreKind is the kind of the semaphore.
	SemaphoreKind string `protobuf:"bytes,1,opt,name=SemaphoreKind,proto3" json:"SemaphoreKind,omitempty"`
	// SemaphoreName is the name of the semaphore.
	SemaphoreName string `protobuf:"bytes,2,opt,name=SemaphoreName,proto3" json:"SemaphoreName,omitempty"`
	// MaxLeases is the maximum number of concurrent leases.  If acquisition
	// would cause more than MaxLeases to exist, acquisition must fail.
	MaxLeases int64 `protobuf:"varint,3,opt,name=MaxLeases,proto3" json:"MaxLeases,omitempty"`
	// Expires is the time at which this lease expires.
	Expires *timestamppb.Timestamp `protobuf:"bytes,4,opt,name=Expires,proto3" json:"Expires,omitempty"`
	// Holder identifies the entitiy holding the lease.
	Holder string `protobuf:"bytes,5,opt,name=Holder,proto3" json:"Holder,omitempty"`
}

func (x *AcquireSemaphoreRequest) Reset() {
	*x = AcquireSemaphoreRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[66]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AcquireSemaphoreRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AcquireSemaphoreRequest) ProtoMessage() {}

func (x *AcquireSemaphoreRequest) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[66]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AcquireSemaphoreRequest.ProtoReflect.Descriptor instead.
func (*AcquireSemaphoreRequest) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{66}
}

func (x *AcquireSemaphoreRequest) GetSemaphoreKind() string {
	if x != nil {
		return x.SemaphoreKind
	}
	return ""
}

func (x *AcquireSemaphoreRequest) GetSemaphoreName() string {
	if x != nil {
		return x.SemaphoreName
	}
	return ""
}

func (x *AcquireSemaphoreRequest) GetMaxLeases() int64 {
	if x != nil {
		return x.MaxLeases
	}
	return 0
}

func (x *AcquireSemaphoreRequest) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *AcquireSemaphoreRequest) GetHolder() string {
	if x != nil {
		return x.Holder
	}
	return ""
}

// SemaphoreLease represents lease acquired for semaphore
type SemaphoreLease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// SemaphoreKind is the kind of the semaphore.
	SemaphoreKind string `protobuf:"bytes,1,opt,name=SemaphoreKind,proto3" json:"SemaphoreKind,omitempty"`
	// SemaphoreName is the name of the semaphore.
	SemaphoreName string `protobuf:"bytes,2,opt,name=SemaphoreName,proto3" json:"SemaphoreName,omitempty"`
	// LeaseID uniquely identifies this lease.
	LeaseID string `protobuf:"bytes,3,opt,name=LeaseID,proto3" json:"LeaseID,omitempty"`
	// Expires is the time at which this lease expires.
	Expires *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=Expires,proto3" json:"Expires,omitempty"`
}

func (x *SemaphoreLease) Reset() {
	*x = SemaphoreLease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[67]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemaphoreLease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreLease) ProtoMessage() {}

func (x *SemaphoreLease) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[67]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreLease.ProtoReflect.Descriptor instead.
func (*SemaphoreLease) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{67}
}

func (x *SemaphoreLease) GetSemaphoreKind() string {
	if x != nil {
		return x.SemaphoreKind
	}
	return ""
}

func (x *SemaphoreLease) GetSemaphoreName() string {
	if x != nil {
		return x.SemaphoreName
	}
	return ""
}

func (x *SemaphoreLease) GetLeaseID() string {
	if x != nil {
		return x.LeaseID
	}
	return ""
}

func (x *SemaphoreLease) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

// SemaphoreLeaseRef identifies an existent lease.
type SemaphoreLeaseRef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// LeaseID is the unique ID of the lease.
	LeaseID string `protobuf:"bytes,1,opt,name=LeaseID,proto3" json:"LeaseID,omitempty"`
	// Expires is the time at which the lease expires.
	Expires *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=Expires,proto3" json:"Expires,omitempty"`
	// Holder identifies the lease holder.
	Holder string `protobuf:"bytes,3,opt,name=Holder,proto3" json:"Holder,omitempty"`
}

func (x *SemaphoreLeaseRef) Reset() {
	*x = SemaphoreLeaseRef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[68]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemaphoreLeaseRef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreLeaseRef) ProtoMessage() {}

func (x *SemaphoreLeaseRef) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[68]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreLeaseRef.ProtoReflect.Descriptor instead.
func (*SemaphoreLeaseRef) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{68}
}

func (x *SemaphoreLeaseRef) GetLeaseID() string {
	if x != nil {
		return x.LeaseID
	}
	return ""
}

func (x *SemaphoreLeaseRef) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

func (x *SemaphoreLeaseRef) GetHolder() string {
	if x != nil {
		return x.Holder
	}
	return ""
}

// SemaphoreV3 implements Semaphore interface
type SemaphoreV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is Semaphore metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a lease V3 spec
	Spec *SemaphoreSpecV3 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *SemaphoreV3) Reset() {
	*x = SemaphoreV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[69]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemaphoreV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreV3) ProtoMessage() {}

func (x *SemaphoreV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[69]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreV3.ProtoReflect.Descriptor instead.
func (*SemaphoreV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{69}
}

func (x *SemaphoreV3) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *SemaphoreV3) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *SemaphoreV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *SemaphoreV3) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *SemaphoreV3) GetSpec() *SemaphoreSpecV3 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// SemaphoreSpecV3 contains the data about lease
type SemaphoreSpecV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Leases is a list of all currently acquired leases.
	Leases []*SemaphoreLeaseRef `protobuf:"bytes,1,rep,name=Leases,proto3" json:"Leases,omitempty"`
}

func (x *SemaphoreSpecV3) Reset() {
	*x = SemaphoreSpecV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[70]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SemaphoreSpecV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SemaphoreSpecV3) ProtoMessage() {}

func (x *SemaphoreSpecV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[70]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SemaphoreSpecV3.ProtoReflect.Descriptor instead.
func (*SemaphoreSpecV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{70}
}

func (x *SemaphoreSpecV3) GetLeases() []*SemaphoreLeaseRef {
	if x != nil {
		return x.Leases
	}
	return nil
}

// WebSessionV2 represents an application or UI web session.
type WebSessionV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind.
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources.
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is version.
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is a resource metadata.
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Spec is a tunnel specification.
	Spec *WebSessionSpecV2 `protobuf:"bytes,5,opt,name=Spec,proto3" json:"Spec,omitempty"`
}

func (x *WebSessionV2) Reset() {
	*x = WebSessionV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[71]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebSessionV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSessionV2) ProtoMessage() {}

func (x *WebSessionV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[71]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSessionV2.ProtoReflect.Descriptor instead.
func (*WebSessionV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{71}
}

func (x *WebSessionV2) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *WebSessionV2) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *WebSessionV2) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *WebSessionV2) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *WebSessionV2) GetSpec() *WebSessionSpecV2 {
	if x != nil {
		return x.Spec
	}
	return nil
}

// WebSessionSpecV2 is a specification for web session.
type WebSessionSpecV2 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// User is the identity of the user to which the web session belongs.
	User string `protobuf:"bytes,1,opt,name=User,proto3" json:"User,omitempty"`
	// Pub is the SSH certificate for the user.
	Pub []byte `protobuf:"bytes,2,opt,name=Pub,proto3" json:"Pub,omitempty"`
	// Priv is the SSH private key for the user.
	Priv []byte `protobuf:"bytes,3,opt,name=Priv,proto3" json:"Priv,omitempty"`
	// TLSCert is the TLS certificate for the user.
	TLSCert []byte `protobuf:"bytes,4,opt,name=TLSCert,proto3" json:"TLSCert,omitempty"`
	// BearerToken is a token that is paired with the session cookie for
	// authentication. It is periodically rotated so a stolen cookie itself
	// is not enough to steal a session. In addition it is used for CSRF
	// mitigation.
	BearerToken string `protobuf:"bytes,5,opt,name=BearerToken,proto3" json:"BearerToken,omitempty"`
	// BearerTokenExpires is the absolute time when the token expires.
	BearerTokenExpires *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=BearerTokenExpires,proto3" json:"BearerTokenExpires,omitempty"`
	// Expires is the absolute time when the session expires.
	Expires *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=Expires,proto3" json:"Expires,omitempty"`
}

func (x *WebSessionSpecV2) Reset() {
	*x = WebSessionSpecV2{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[72]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WebSessionSpecV2) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WebSessionSpecV2) ProtoMessage() {}

func (x *WebSessionSpecV2) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[72]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WebSessionSpecV2.ProtoReflect.Descriptor instead.
func (*WebSessionSpecV2) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{72}
}

func (x *WebSessionSpecV2) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *WebSessionSpecV2) GetPub() []byte {
	if x != nil {
		return x.Pub
	}
	return nil
}

func (x *WebSessionSpecV2) GetPriv() []byte {
	if x != nil {
		return x.Priv
	}
	return nil
}

func (x *WebSessionSpecV2) GetTLSCert() []byte {
	if x != nil {
		return x.TLSCert
	}
	return nil
}

func (x *WebSessionSpecV2) GetBearerToken() string {
	if x != nil {
		return x.BearerToken
	}
	return ""
}

func (x *WebSessionSpecV2) GetBearerTokenExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.BearerTokenExpires
	}
	return nil
}

func (x *WebSessionSpecV2) GetExpires() *timestamppb.Timestamp {
	if x != nil {
		return x.Expires
	}
	return nil
}

// RemoteClusterV3 represents remote cluster resource specification
type RemoteClusterV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Kind is a resource kind
	Kind string `protobuf:"bytes,1,opt,name=Kind,proto3" json:"Kind,omitempty"`
	// SubKind is an optional resource sub kind, used in some resources
	SubKind string `protobuf:"bytes,2,opt,name=SubKind,proto3" json:"SubKind,omitempty"`
	// Version is resource API version
	Version string `protobuf:"bytes,3,opt,name=Version,proto3" json:"Version,omitempty"`
	// Metadata is User metadata
	Metadata *Metadata `protobuf:"bytes,4,opt,name=Metadata,proto3" json:"Metadata,omitempty"`
	// Status is a remote cluster status
	Status *RemoteClusterStatusV3 `protobuf:"bytes,5,opt,name=Status,proto3" json:"Status,omitempty"`
}

func (x *RemoteClusterV3) Reset() {
	*x = RemoteClusterV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[73]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteClusterV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteClusterV3) ProtoMessage() {}

func (x *RemoteClusterV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[73]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteClusterV3.ProtoReflect.Descriptor instead.
func (*RemoteClusterV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{73}
}

func (x *RemoteClusterV3) GetKind() string {
	if x != nil {
		return x.Kind
	}
	return ""
}

func (x *RemoteClusterV3) GetSubKind() string {
	if x != nil {
		return x.SubKind
	}
	return ""
}

func (x *RemoteClusterV3) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *RemoteClusterV3) GetMetadata() *Metadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *RemoteClusterV3) GetStatus() *RemoteClusterStatusV3 {
	if x != nil {
		return x.Status
	}
	return nil
}

// RemoteClusterStatusV3 represents status of the remote cluster
type RemoteClusterStatusV3 struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Connection represents connection status, online or offline
	Connection string `protobuf:"bytes,1,opt,name=Connection,proto3" json:"Connection,omitempty"`
	// LastHeartbeat records last heartbeat of the cluster
	LastHeartbeat *timestamppb.Timestamp `protobuf:"bytes,2,opt,name=LastHeartbeat,proto3" json:"LastHeartbeat,omitempty"`
}

func (x *RemoteClusterStatusV3) Reset() {
	*x = RemoteClusterStatusV3{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[74]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteClusterStatusV3) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteClusterStatusV3) ProtoMessage() {}

func (x *RemoteClusterStatusV3) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[74]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteClusterStatusV3.ProtoReflect.Descriptor instead.
func (*RemoteClusterStatusV3) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{74}
}

func (x *RemoteClusterStatusV3) GetConnection() string {
	if x != nil {
		return x.Connection
	}
	return ""
}

func (x *RemoteClusterStatusV3) GetLastHeartbeat() *timestamppb.Timestamp {
	if x != nil {
		return x.LastHeartbeat
	}
	return nil
}

// KubernetesCluster is a named kubernetes API endpoint handled by a Server.
type KubernetesCluster struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Name is the name of this kubernetes cluster.
	Name string `protobuf:"bytes,1,opt,name=Name,proto3" json:"Name,omitempty"`
	// StaticLabels is map of static labels associated with this cluster.
	// Used for RBAC.
	StaticLabels map[string]string `protobuf:"bytes,2,rep,name=StaticLabels,proto3" json:"StaticLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// DynamicLabels is map of dynamic labels associated with this cluster.
	// Used for RBAC.
	DynamicLabels map[string]*CommandLabelV2 `protobuf:"bytes,3,rep,name=DynamicLabels,proto3" json:"DynamicLabels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *KubernetesCluster) Reset() {
	*x = KubernetesCluster{}
	if protoimpl.UnsafeEnabled {
		mi := &file_types_proto_msgTypes[75]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KubernetesCluster) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KubernetesCluster) ProtoMessage() {}

func (x *KubernetesCluster) ProtoReflect() protoreflect.Message {
	mi := &file_types_proto_msgTypes[75]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KubernetesCluster.ProtoReflect.Descriptor instead.
func (*KubernetesCluster) Descriptor() ([]byte, []int) {
	return file_types_proto_rawDescGZIP(), []int{75}
}

func (x *KubernetesCluster) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *KubernetesCluster) GetStaticLabels() map[string]string {
	if x != nil {
		return x.StaticLabels
	}
	return nil
}

func (x *KubernetesCluster) GetDynamicLabels() map[string]*CommandLabelV2 {
	if x != nil {
		return x.DynamicLabels
	}
	return nil
}

var File_types_proto protoreflect.FileDescriptor

var file_types_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x1a, 0x14, 0x67, 0x6f, 0x67, 0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f,
	0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x43, 0x67, 0x69, 0x74,
	0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61,
	0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x22, 0xfc, 0x02, 0x0a, 0x09, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x12, 0x23,
	0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f, 0xea, 0xde,
	0x1f, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x2b, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0d, 0xea, 0xde, 0x1f, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x12, 0x26, 0x0a, 0x07, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x52,
	0x07, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x12, 0x3c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c,
	0x69, 0x76, 0x65, 0x2e, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x2d, 0x0a, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x11, 0x68, 0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44,
	0x22, 0x3d, 0x0a, 0x0d, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x54, 0x79, 0x70,
	0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x44, 0x45, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x50, 0x50, 0x10,
	0x02, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x10, 0x03, 0x22,
	0x87, 0x03, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x1c, 0x0a, 0x04,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x09, 0x4e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x05, 0xea,
	0xde, 0x1f, 0x01, 0x2d, 0x52, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12,
	0x3b, 0x0a, 0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xde, 0x1f, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x0b, 0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x06,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xea, 0xde, 0x1f, 0x10, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x53, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72,
	0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x1d, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x01, 0xea, 0xde,
	0x1f, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x20, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x69, 0x64,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x02, 0x49, 0x44, 0x1a, 0x39,
	0x0a, 0x0b, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x92, 0x04, 0x0a, 0x08, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xde, 0x1f, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x29, 0x0a, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xea, 0xde, 0x1f, 0x0f, 0x70, 0x68, 0x61, 0x73, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x50, 0x68, 0x61, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e,
	0x6d, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x04,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x49,
	0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xde, 0x1f, 0x0a, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x09, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x49, 0x44, 0x12, 0x53, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42,
	0x1d, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x11, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x12, 0x48, 0x0a, 0x0b, 0x47, 0x72, 0x61, 0x63, 0x65,
	0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x42, 0x26, 0xea, 0xde,
	0x1f, 0x16, 0x67, 0x72, 0x61, 0x63, 0x65, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xfa, 0xde, 0x1f, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x47, 0x72, 0x61, 0x63, 0x65, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x60, 0x0a, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x22, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x16,
	0x6c, 0x61, 0x73, 0x74, 0x5f, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0b, 0x4c, 0x61, 0x73, 0x74, 0x52, 0x6f, 0x74, 0x61,
	0x74, 0x65, 0x64, 0x12, 0x4f, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x1a,
	0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x08, 0x53, 0x63, 0x68, 0x65,
	0x64, 0x75, 0x6c, 0x65, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0xb7,
	0x02, 0x0a, 0x10, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x63, 0x68, 0x65, 0x64,
	0x75, 0x6c, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x24, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01,
	0xea, 0xde, 0x1f, 0x18, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x66, 0x0a, 0x0d, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x24,
	0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x18, 0x75, 0x70, 0x64, 0x61,
	0x74, 0x65, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x73, 0x12, 0x53, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x42, 0x1d, 0xc8, 0xde, 0x1f, 0x00, 0x90, 0xdf, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x11, 0x73, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x07, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x22, 0xe4, 0x01, 0x0a, 0x0e, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x48, 0x65, 0x61, 0x64, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e, 0x6b,
	0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75,
	0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2f, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x11, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x47, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x1a, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x12, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x22,
	0x91, 0x02, 0x0a, 0x10, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x56, 0x33, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10,
	0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53,
	0x70, 0x65, 0x63, 0x56, 0x33, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80,
	0xdc, 0x20, 0x00, 0x22, 0x82, 0x05, 0x0a, 0x14, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x12, 0x3b, 0x0a, 0x0b,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x19, 0xea, 0xde, 0x1f, 0x15, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0b, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x0a, 0x08, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xea, 0xde, 0x1f,
	0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x12, 0x19, 0x0a, 0x03, 0x55, 0x52, 0x49, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x07, 0xea, 0xde, 0x1f, 0x03, 0x75, 0x72, 0x69, 0x52, 0x03, 0x55, 0x52, 0x49, 0x12, 0x2d,
	0x0a, 0x06, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x15,
	0xea, 0xde, 0x1f, 0x11, 0x63, 0x61, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x43, 0x41, 0x43, 0x65, 0x72, 0x74, 0x12, 0x29, 0x0a,
	0x03, 0x41, 0x57, 0x53, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x41, 0x57, 0x53, 0x42, 0x0b, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x03,
	0x61, 0x77, 0x73, 0x52, 0x03, 0x41, 0x57, 0x53, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52,
	0x08, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x23, 0x0a, 0x06, 0x48, 0x6f, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x69, 0x64, 0x52, 0x06, 0x48, 0x6f, 0x73, 0x74, 0x49, 0x44, 0x12, 0x76,
	0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x44, 0x61,
	0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x33, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x20, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x18, 0x64,
	0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x12, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a,
	0x57, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43,
	0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x32, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a, 0x03, 0x41, 0x57, 0x53, 0x12,
	0x2c, 0x0a, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x14, 0xea, 0xde, 0x1f, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x22, 0x81, 0x02,
	0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73,
	0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x35, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65,
	0x63, 0x56, 0x32, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73, 0x70, 0x65,
	0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20,
	0x00, 0x22, 0x8f, 0x05, 0x0a, 0x0c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x32, 0x12, 0x1c, 0x0a, 0x04, 0x41, 0x64, 0x64, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x61, 0x64, 0x64, 0x72, 0x52, 0x04, 0x41, 0x64, 0x64, 0x72,
	0x12, 0x39, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xde, 0x1f, 0x15, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x61, 0x64, 0x64, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12, 0x28, 0x0a, 0x08, 0x48,
	0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xea,
	0xde, 0x1f, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x08, 0x48, 0x6f, 0x73,
	0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x5e, 0x0a, 0x09, 0x43, 0x6d, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x2e, 0x43, 0x6d,
	0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1c, 0xc8, 0xde,
	0x1f, 0x00, 0xea, 0xde, 0x1f, 0x14, 0x63, 0x6d, 0x64, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x43, 0x6d, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde,
	0x1f, 0x12, 0x72, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x09, 0x55, 0x73, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x18, 0xea, 0xde, 0x1f, 0x14, 0x75, 0x73, 0x65, 0x5f, 0x74, 0x75, 0x6e, 0x6e, 0x65,
	0x6c, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x55, 0x73, 0x65,
	0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x32, 0x0a,
	0x04, 0x41, 0x70, 0x70, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0a, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e, 0x61, 0x70, 0x70,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x04, 0x41, 0x70, 0x70,
	0x73, 0x12, 0x65, 0x0a, 0x12, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x42, 0x1b, 0xea, 0xde, 0x1f, 0x17, 0x6b, 0x75, 0x62,
	0x65, 0x5f, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x12, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73,
	0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x73, 0x1a, 0x53, 0x0a, 0x0e, 0x43, 0x6d, 0x64, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x56, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x4a, 0x04, 0x08,
	0x08, 0x10, 0x09, 0x22, 0xd7, 0x04, 0x0a, 0x03, 0x41, 0x70, 0x70, 0x12, 0x1c, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a, 0x03, 0x55, 0x52, 0x49,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xea, 0xde, 0x1f, 0x03, 0x75, 0x72, 0x69, 0x52,
	0x03, 0x55, 0x52, 0x49, 0x12, 0x39, 0x0a, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64,
	0x64, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x19, 0xea, 0xde, 0x1f, 0x15, 0x70, 0x75,
	0x62, 0x6c, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x0a, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x41, 0x64, 0x64, 0x72, 0x12,
	0x56, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70,
	0x70, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x14, 0xea, 0xde, 0x1f, 0x10, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x69,
	0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x5f, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x70, 0x70, 0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1a, 0xc8,
	0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x12, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d,
	0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x48, 0x0a, 0x12, 0x49, 0x6e, 0x73, 0x65,
	0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x08, 0x42, 0x18, 0xea, 0xde, 0x1f, 0x14, 0x69, 0x6e, 0x73, 0x65, 0x63, 0x75,
	0x72, 0x65, 0x5f, 0x73, 0x6b, 0x69, 0x70, 0x5f, 0x76, 0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x12,
	0x49, 0x6e, 0x73, 0x65, 0x63, 0x75, 0x72, 0x65, 0x53, 0x6b, 0x69, 0x70, 0x56, 0x65, 0x72, 0x69,
	0x66, 0x79, 0x12, 0x3f, 0x0a, 0x07, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x11, 0x72, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x52, 0x65, 0x77, 0x72,
	0x69, 0x74, 0x65, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x56, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x33, 0x0a,
	0x07, 0x52, 0x65, 0x77, 0x72, 0x69, 0x74, 0x65, 0x12, 0x28, 0x0a, 0x08, 0x52, 0x65, 0x64, 0x69,
	0x72, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08,
	0x72, 0x65, 0x64, 0x69, 0x72, 0x65, 0x63, 0x74, 0x52, 0x08, 0x52, 0x65, 0x64, 0x69, 0x72, 0x65,
	0x63, 0x74, 0x22, 0x8b, 0x01, 0x0a, 0x0e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x56, 0x32, 0x12, 0x2e, 0x0a, 0x06, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x03, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x06, 0x70, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0xfa, 0xde, 0x1f, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x06, 0x50,
	0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x52, 0x07, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x22, 0x0a, 0x06,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xde,
	0x1f, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x06, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74,
	0x22, 0x59, 0x0a, 0x0a, 0x54, 0x4c, 0x53, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x26,
	0x0a, 0x04, 0x43, 0x65, 0x72, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x12, 0xea, 0xde,
	0x1f, 0x0e, 0x63, 0x65, 0x72, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x04, 0x43, 0x65, 0x72, 0x74, 0x12, 0x23, 0x0a, 0x03, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x11, 0xea, 0xde, 0x1f, 0x0d, 0x6b, 0x65, 0x79, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x03, 0x4b, 0x65, 0x79, 0x22, 0x7f, 0x0a, 0x0a, 0x4a,
	0x57, 0x54, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x12, 0x36, 0x0a, 0x09, 0x50, 0x75, 0x62,
	0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x18, 0xea, 0xde,
	0x1f, 0x14, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65,
	0x79, 0x12, 0x39, 0x0a, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x19, 0xea, 0xde, 0x1f, 0x15, 0x70, 0x72, 0x69, 0x76, 0x61,
	0x74, 0x65, 0x5f, 0x6b, 0x65, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x0a, 0x50, 0x72, 0x69, 0x76, 0x61, 0x74, 0x65, 0x4b, 0x65, 0x79, 0x22, 0x8f, 0x02, 0x0a,
	0x0f, 0x43, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x56, 0x32,
	0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30,
	0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00,
	0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x72,
	0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32,
	0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0x97,
	0x06, 0x0a, 0x13, 0x43, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x12, 0x2c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x18, 0xea, 0xde, 0x1f, 0x04, 0x74, 0x79, 0x70, 0x65, 0xfa, 0xde,
	0x1f, 0x0c, 0x43, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x32, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3f, 0x0a, 0x0c, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x1b,
	0xea, 0xde, 0x1f, 0x17, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0c, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x53, 0x69, 0x67,
	0x6e, 0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0c, 0x42, 0x1a,
	0xea, 0xde, 0x1f, 0x16, 0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x6b, 0x65, 0x79, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0b, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xea, 0xde, 0x1f, 0x0f, 0x72, 0x6f, 0x6c, 0x65,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x12, 0x48, 0x0a, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x1a, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f,
	0x12, 0x72, 0x6f, 0x6c, 0x65, 0x5f, 0x6d, 0x61, 0x70, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x07, 0x52, 0x6f, 0x6c, 0x65, 0x4d, 0x61, 0x70, 0x12, 0x54, 0x0a, 0x0b,
	0x54, 0x4c, 0x53, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x4c, 0x53, 0x4b, 0x65, 0x79,
	0x50, 0x61, 0x69, 0x72, 0x42, 0x1f, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x17, 0x74, 0x6c,
	0x73, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0b, 0x54, 0x4c, 0x53, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69,
	0x72, 0x73, 0x12, 0x47, 0x0a, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x1a, 0xc8, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x12, 0x72,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x08, 0x52, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x64, 0x0a, 0x0a, 0x53,
	0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x29, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x65, 0x72, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x2e, 0x53, 0x69, 0x67, 0x6e,
	0x69, 0x6e, 0x67, 0x41, 0x6c, 0x67, 0x54, 0x79, 0x70, 0x65, 0x42, 0x19, 0xea, 0xde, 0x1f, 0x15,
	0x73, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x61, 0x6c, 0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0a, 0x53, 0x69, 0x67, 0x6e, 0x69, 0x6e, 0x67, 0x41, 0x6c,
	0x67, 0x12, 0x54, 0x0a, 0x0b, 0x4a, 0x57, 0x54, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x73,
	0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4a,
	0x57, 0x54, 0x4b, 0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x42, 0x1f, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x17, 0x6a, 0x77, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x70, 0x61, 0x69, 0x72, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0b, 0x4a, 0x57, 0x54, 0x4b,
	0x65, 0x79, 0x50, 0x61, 0x69, 0x72, 0x73, 0x22, 0x4f, 0x0a, 0x0e, 0x53, 0x69, 0x67, 0x6e, 0x69,
	0x6e, 0x67, 0x41, 0x6c, 0x67, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x53, 0x41, 0x5f, 0x53, 0x48,
	0x41, 0x31, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x53, 0x41, 0x5f, 0x53, 0x48, 0x41, 0x32,
	0x5f, 0x32, 0x35, 0x36, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x53, 0x41, 0x5f, 0x53, 0x48,
	0x41, 0x32, 0x5f, 0x35, 0x31, 0x32, 0x10, 0x03, 0x22, 0x52, 0x0a, 0x0b, 0x52, 0x6f, 0x6c, 0x65,
	0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x22, 0x0a, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xde, 0x1f, 0x06, 0x72, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x52, 0x06, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x05, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05,
	0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x52, 0x05, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x22, 0xdd, 0x01, 0x0a,
	0x10, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56,
	0x31, 0x12, 0x49, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x33, 0xea, 0xde, 0x1f, 0x05, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0xfa, 0xde, 0x1f, 0x26, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x53, 0x0a, 0x07,
	0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1d, 0x90, 0xdf, 0x1f, 0x01, 0xc8,
	0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x12, 0x1f, 0x0a, 0x05, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x05, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0x91, 0x02, 0x0a,
	0x10, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56,
	0x32, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e,
	0x64, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f,
	0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3d, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72,
	0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x32, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00,
	0x22, 0x61, 0x0a, 0x14, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x12, 0x49, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x33, 0xea, 0xde, 0x1f, 0x05, 0x72, 0x6f, 0x6c,
	0x65, 0x73, 0xfa, 0xde, 0x1f, 0x26, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74,
	0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x52, 0x05, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x22, 0x8d, 0x02, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x73, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b,
	0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53,
	0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a,
	0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3b, 0x0a, 0x04,
	0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x53,
	0x70, 0x65, 0x63, 0x56, 0x32, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80,
	0xdc, 0x20, 0x00, 0x22, 0x68, 0x0a, 0x12, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x73, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x12, 0x52, 0x0a, 0x0c, 0x53, 0x74, 0x61,
	0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x31, 0x42, 0x15, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde,
	0x1f, 0x0d, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63, 0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x52,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x73, 0x22, 0x8b, 0x02,
	0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x56, 0x32, 0x12,
	0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea,
	0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a,
	0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12,
	0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x42, 0x0c, 0xc8,
	0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65,
	0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0x47, 0x0a, 0x11, 0x43,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32,
	0x12, 0x32, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x56, 0x33, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c,
	0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde,
	0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0,
	0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0xeb, 0x05, 0x0a, 0x13, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x12, 0x41,
	0x0a, 0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x11, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x52,
	0x10, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x2c, 0x0a, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xde, 0x1f, 0x0a, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x52, 0x09, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x4c, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x48, 0x6f,
	0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1a, 0xea, 0xde,
	0x1f, 0x16, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x5f, 0x68,
	0x6f, 0x73, 0x74, 0x5f, 0x6b, 0x65, 0x79, 0x73, 0x52, 0x13, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x73, 0x48, 0x6f, 0x73, 0x74, 0x4b, 0x65, 0x79, 0x73, 0x12, 0x37, 0x0a,
	0x05, 0x41, 0x75, 0x64, 0x69, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x42, 0x0d, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x05, 0x61, 0x75, 0x64, 0x69, 0x74, 0x52,
	0x05, 0x41, 0x75, 0x64, 0x69, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x03, 0x42, 0x23, 0xea, 0xde, 0x1f, 0x13, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x6c, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0xfa, 0xde, 0x1f, 0x08, 0x44, 0x75,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64,
	0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x59, 0x0a, 0x15, 0x44, 0x69, 0x73,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x43, 0x65,
	0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x23, 0xea, 0xde, 0x1f, 0x17, 0x64, 0x69,
	0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x5f, 0x63, 0x65, 0x72, 0x74, 0xfa, 0xde, 0x1f, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x15, 0x44,
	0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64,
	0x43, 0x65, 0x72, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76,
	0x65, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x23, 0xea, 0xde, 0x1f, 0x13, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69, 0x76, 0x65, 0x5f,
	0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0xfa, 0xde, 0x1f, 0x08, 0x44, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x4b, 0x65, 0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x46, 0x0a, 0x11, 0x4b, 0x65, 0x65, 0x70, 0x41,
	0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x03, 0x42, 0x18, 0xea, 0xde, 0x1f, 0x14, 0x6b, 0x65, 0x65, 0x70, 0x5f, 0x61, 0x6c, 0x69,
	0x76, 0x65, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x5f, 0x6d, 0x61, 0x78, 0x52, 0x11, 0x4b, 0x65,
	0x65, 0x70, 0x41, 0x6c, 0x69, 0x76, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x12,
	0x34, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x08, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x0a, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x75,
	0x74, 0x68, 0xfa, 0xde, 0x1f, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x12, 0x5d, 0x0a, 0x15, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e,
	0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x27, 0xea, 0xde, 0x1f, 0x17, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f,
	0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0xfa, 0xde, 0x1f, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x15, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x22, 0x8f, 0x08, 0x0a, 0x0b, 0x41, 0x75, 0x64, 0x69, 0x74, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x12, 0x26, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e, 0x74, 0x79, 0x70, 0x65, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x2c, 0x0a, 0x06,
	0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xde,
	0x1f, 0x10, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x06, 0x52, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x4c, 0x0a, 0x10, 0x41, 0x75,
	0x64, 0x69, 0x74, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x52, 0x49, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x20, 0xea, 0xde, 0x1f, 0x1c, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f,
	0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x75, 0x72, 0x69, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x10, 0x41, 0x75, 0x64, 0x69, 0x74, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x55, 0x52, 0x49, 0x12, 0xa2, 0x01, 0x0a, 0x0e, 0x41, 0x75, 0x64,
	0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x52, 0x49, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x16, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x62, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x1a, 0x61, 0x75, 0x64, 0x69, 0x74, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f,
	0x75, 0x72, 0x69, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xda, 0xde, 0x1f,
	0x3c, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76,
	0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x72, 0x61,
	0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x0e, 0x41,
	0x75, 0x64, 0x69, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x55, 0x52, 0x49, 0x12, 0x46, 0x0a,
	0x0e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1e, 0xea, 0xde, 0x1f, 0x1a, 0x61, 0x75, 0x64, 0x69, 0x74,
	0x5f, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0e, 0x41, 0x75, 0x64, 0x69, 0x74, 0x54, 0x61, 0x62, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x5a, 0x0a, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x43,
	0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x20, 0xea, 0xde, 0x1f, 0x1c, 0x63, 0x6f, 0x6e, 0x74,
	0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x5f, 0x62, 0x61, 0x63, 0x6b, 0x75, 0x70, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x17, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x6f, 0x75, 0x73, 0x42, 0x61, 0x63, 0x6b, 0x75, 0x70,
	0x73, 0x12, 0x48, 0x0a, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x41, 0x75, 0x74, 0x6f, 0x53,
	0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1a, 0xea, 0xde,
	0x1f, 0x16, 0x61, 0x75, 0x74, 0x6f, 0x5f, 0x73, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x11, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x41, 0x75, 0x74, 0x6f, 0x53, 0x63, 0x61, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x49, 0x0a, 0x0f, 0x52,
	0x65, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x1b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d,
	0x61, 0x78, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x61, 0x78, 0x43, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x49, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x69,
	0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42,
	0x1f, 0xea, 0xde, 0x1f, 0x1b, 0x72, 0x65, 0x61, 0x64, 0x5f, 0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x61,
	0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x4d, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74,
	0x79, 0x12, 0x49, 0x0a, 0x0f, 0x52, 0x65, 0x61, 0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x1b,
	0x72, 0x65, 0x61, 0x64, 0x5f, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0f, 0x52, 0x65, 0x61,
	0x64, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x4c, 0x0a, 0x10,
	0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x61, 0x78, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x42, 0x20, 0xea, 0xde, 0x1f, 0x1c, 0x77, 0x72, 0x69, 0x74,
	0x65, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d,
	0x61, 0x78, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x57, 0x72,
	0x69, 0x74, 0x65, 0x4d, 0x69, 0x6e, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x03, 0x42, 0x20, 0xea, 0xde, 0x1f, 0x1c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f,
	0x6d, 0x69, 0x6e, 0x5f, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x4d, 0x69, 0x6e,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x57, 0x72, 0x69, 0x74,
	0x65, 0x54, 0x61, 0x72, 0x67, 0x65, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x20, 0xea, 0xde, 0x1f, 0x1c, 0x77, 0x72, 0x69, 0x74, 0x65, 0x5f, 0x74, 0x61,
	0x72, 0x67, 0x65, 0x74, 0x5f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x10, 0x57, 0x72, 0x69, 0x74, 0x65, 0x54, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf9, 0x01, 0x0a, 0x09, 0x4e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e,
	0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62,
	0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10,
	0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53, 0x70, 0x65, 0x63, 0x42, 0x0c,
	0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70,
	0x65, 0x63, 0x22, 0x0f, 0x0a, 0x0d, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x53,
	0x70, 0x65, 0x63, 0x22, 0x99, 0x02, 0x0a, 0x14, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73,
	0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x56, 0x33, 0x12, 0x1c, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75,
	0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f,
	0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea,
	0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x41, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x56,
	0x33, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52,
	0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22,
	0xa8, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x12, 0x1c, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x03, 0x55, 0x52,
	0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x07, 0xea, 0xde, 0x1f, 0x03, 0x75, 0x72, 0x6c,
	0x52, 0x03, 0x55, 0x52, 0x4c, 0x12, 0x53, 0x0a, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x1d, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x11,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x22, 0xa7, 0x02, 0x0a, 0x1b, 0x52,
	0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65,
	0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x56, 0x33, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69,
	0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69,
	0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73,
	0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x12, 0x48, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61, 0x73, 0x73,
	0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04,
	0x73, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00,
	0x80, 0xdc, 0x20, 0x00, 0x22, 0xca, 0x01, 0x0a, 0x1f, 0x52, 0x65, 0x73, 0x65, 0x74, 0x50, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x53, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x73, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x12, 0x23, 0x0a, 0x06, 0x4f, 0x54, 0x50, 0x4b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x6f, 0x70,
	0x74, 0x5f, 0x6b, 0x65, 0x79, 0x52, 0x06, 0x4f, 0x54, 0x50, 0x4b, 0x65, 0x79, 0x12, 0x2d, 0x0a,
	0x06, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15, 0xea,
	0xde, 0x1f, 0x11, 0x71, 0x72, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x51, 0x52, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x53, 0x0a, 0x07,
	0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1d, 0x90, 0xdf, 0x1f, 0x01, 0xc8,
	0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x22, 0x8f, 0x02, 0x0a, 0x0f, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x56, 0x33, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69,
	0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75,
	0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42,
	0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x53,
	0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53,
	0x70, 0x65, 0x63, 0x56, 0x33, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73,
	0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80,
	0xdc, 0x20, 0x00, 0x22, 0x9f, 0x06, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x12, 0x1c, 0x0a, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x75,
	0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1f, 0x0a, 0x05, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x3e, 0x0a, 0x05, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x13,
	0xea, 0xde, 0x1f, 0x0f, 0x73, 0x74, 0x61, 0x74, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x53, 0x0a, 0x07, 0x43, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1d, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f,
	0x00, 0xea, 0xde, 0x1f, 0x11, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x12,
	0x53, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x1d, 0x90, 0xdf,
	0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x11, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xde, 0x1f,
	0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x42, 0x0a, 0x0d, 0x52, 0x65, 0x73, 0x6f,
	0x6c, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1c, 0xea, 0xde, 0x1f, 0x18, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x5f, 0x72, 0x65, 0x61,
	0x73, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d, 0x52,
	0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0xab, 0x01, 0x0a,
	0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x72, 0x61, 0x70,
	0x70, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73,
	0x42, 0x64, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x1d, 0x72, 0x65, 0x73, 0x6f, 0x6c, 0x76,
	0x65, 0x5f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xda, 0xde, 0x1f, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69,
	0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e,
	0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x52, 0x12, 0x52, 0x65, 0x73, 0x6f, 0x6c, 0x76, 0x65, 0x41,
	0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0xa8, 0x01, 0x0a, 0x11, 0x53,
	0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x63, 0xc8,
	0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x1c, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x5f, 0x61, 0x6e,
	0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0xda, 0xde, 0x1f, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f,
	0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x69,
	0x74, 0x73, 0x52, 0x11, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x81, 0x01, 0x0a, 0x13, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x16, 0x0a,
	0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xea, 0xde, 0x1f, 0x02, 0x69,
	0x64, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x34, 0x0a, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x42, 0x09, 0xea, 0xde, 0x1f, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x52, 0x05, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x61, 0x0a, 0x12, 0x41, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12,
	0x4b, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f,
	0x6c, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x1b, 0x72,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x10, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0x90, 0x01, 0x0a,
	0x19, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x61, 0x70, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x26, 0x0a, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e, 0x75, 0x73,
	0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x04, 0x55, 0x73,
	0x65, 0x72, 0x12, 0x4b, 0x0a, 0x10, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c,
	0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x42, 0x1f, 0xea, 0xde,
	0x1f, 0x1b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x5f, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x10, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22,
	0x89, 0x02, 0x0a, 0x0c, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x56, 0x33,
	0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30,
	0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00,
	0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x39, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x42, 0x0c, 0xc8,
	0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65,
	0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0x94, 0x01, 0x0a, 0x0f,
	0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12,
	0x48, 0x0a, 0x04, 0x44, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42,
	0x12, 0xea, 0xde, 0x1f, 0x0e, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x04, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x37, 0x0a, 0x09, 0x44, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02,
	0x38, 0x01, 0x22, 0xb3, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74,
	0x61, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x12, 0x4b, 0x0a, 0x07, 0x45, 0x6e, 0x74, 0x72, 0x69,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x70, 0x65, 0x63, 0x56,
	0x33, 0x2e, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x0b,
	0xea, 0xde, 0x1f, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x07, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x1a, 0x52, 0x0a, 0x0c, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2c, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x9c, 0x01, 0x0a, 0x10, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x26, 0x0a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x12, 0xea, 0xde, 0x1f,
	0x0e, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x32, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x72, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x2c, 0x0a, 0x06, 0x50, 0x6c, 0x75,
	0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x14, 0xea, 0xde, 0x1f, 0x10, 0x70,
	0x6c, 0x75, 0x67, 0x69, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x22, 0x9d, 0x03, 0x0a, 0x16, 0x50, 0x6c, 0x75, 0x67,
	0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x73, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x28, 0x0a, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x52, 0x08, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x6c,
	0x75, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xde, 0x1f, 0x06,
	0x70, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x52, 0x06, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x12, 0x4b,
	0x0a, 0x03, 0x53, 0x65, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x53, 0x65, 0x74, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x11, 0xea, 0xde, 0x1f, 0x0d, 0x73, 0x65, 0x74, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x03, 0x53, 0x65, 0x74, 0x12, 0x57, 0x0a, 0x06, 0x45,
	0x78, 0x70, 0x65, 0x63, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x50, 0x6c, 0x75, 0x67, 0x69, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x73, 0x2e, 0x45, 0x78, 0x70, 0x65, 0x63,
	0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x14, 0xea, 0xde, 0x1f, 0x10, 0x65, 0x78, 0x70, 0x65,
	0x63, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x45, 0x78,
	0x70, 0x65, 0x63, 0x74, 0x1a, 0x36, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x39, 0x0a, 0x0b,
	0x45, 0x78, 0x70, 0x65, 0x63, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xfd, 0x01, 0x0a, 0x06, 0x52, 0x6f, 0x6c, 0x65,
	0x56, 0x33, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69,
	0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde,
	0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x33, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52,
	0x6f, 0x6c, 0x65, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98,
	0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0xde, 0x01, 0x0a, 0x0a, 0x52, 0x6f, 0x6c, 0x65,
	0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x12, 0x47, 0x0a, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x52, 0x6f, 0x6c, 0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x19, 0xc8, 0xde, 0x1f,
	0x00, 0xea, 0xde, 0x1f, 0x11, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12,
	0x44, 0x0a, 0x05, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x17, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x0f, 0x61,
	0x6c, 0x6c, 0x6f, 0x77, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x41, 0x0a, 0x04, 0x44, 0x65, 0x6e, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x6f, 0x6c, 0x65,
	0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x16, 0xc8, 0xde, 0x1f, 0x00,
	0xea, 0xde, 0x1f, 0x0e, 0x64, 0x65, 0x6e, 0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x04, 0x44, 0x65, 0x6e, 0x79, 0x22, 0xc4, 0x07, 0x0a, 0x0b, 0x52, 0x6f, 0x6c,
	0x65, 0x4f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3d, 0x0a, 0x0c, 0x46, 0x6f, 0x72, 0x77,
	0x61, 0x72, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x19,
	0xea, 0xde, 0x1f, 0x0d, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x5f, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0xfa, 0xde, 0x1f, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x0c, 0x46, 0x6f, 0x72, 0x77, 0x61,
	0x72, 0x64, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x4f, 0x0a, 0x0d, 0x4d, 0x61, 0x78, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x54, 0x4c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x42, 0x29,
	0xea, 0xde, 0x1f, 0x19, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f,
	0x74, 0x74, 0x6c, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xfa, 0xde, 0x1f,
	0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0d, 0x4d, 0x61, 0x78, 0x53, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x54, 0x54, 0x4c, 0x12, 0x69, 0x0a, 0x0e, 0x50, 0x6f, 0x72, 0x74,
	0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x19, 0x70, 0x6f, 0x72, 0x74,
	0x5f, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0xda, 0xde, 0x1f, 0x0a, 0x42, 0x6f, 0x6f, 0x6c, 0x4f, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x0e, 0x50, 0x6f, 0x72, 0x74, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x12, 0x3d, 0x0a, 0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0f,
	0xea, 0xde, 0x1f, 0x0b, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x52,
	0x11, 0x43, 0x65, 0x72, 0x74, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x65, 0x46, 0x6f, 0x72, 0x6d,
	0x61, 0x74, 0x12, 0x5b, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x6c, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x2d, 0xea,
	0xde, 0x1f, 0x1d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0xfa, 0xde, 0x1f, 0x08, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x11, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x6c, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12,
	0x67, 0x0a, 0x15, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x42, 0x31,
	0xc8, 0xde, 0x1f, 0x01, 0xea, 0xde, 0x1f, 0x21, 0x64, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xfa, 0xde, 0x1f, 0x04, 0x42, 0x6f, 0x6f,
	0x6c, 0x52, 0x15, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x78, 0x70,
	0x69, 0x72, 0x65, 0x64, 0x43, 0x65, 0x72, 0x74, 0x12, 0x32, 0x0a, 0x03, 0x42, 0x50, 0x46, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x20, 0xea, 0xde, 0x1f, 0x1c, 0x65, 0x6e, 0x68, 0x61, 0x6e,
	0x63, 0x65, 0x64, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x03, 0x42, 0x50, 0x46, 0x12, 0x61, 0x0a, 0x13,
	0x50, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x58, 0x31, 0x31, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x69, 0x6e, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x2f, 0xc8, 0xde, 0x1f, 0x01, 0xea,
	0xde, 0x1f, 0x1f, 0x70, 0x65, 0x72, 0x6d, 0x69, 0x74, 0x5f, 0x78, 0x31, 0x31, 0x5f, 0x66, 0x6f,
	0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0xfa, 0xde, 0x1f, 0x04, 0x42, 0x6f, 0x6f, 0x6c, 0x52, 0x13, 0x50, 0x65, 0x72, 0x6d,
	0x69, 0x74, 0x58, 0x31, 0x31, 0x46, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x69, 0x6e, 0x67, 0x12,
	0x45, 0x0a, 0x0e, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1d, 0xea, 0xde, 0x1f, 0x19, 0x6d, 0x61, 0x78,
	0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0e, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x0b, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x73,
	0x73, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x42, 0x1a, 0xea, 0xde, 0x1f,
	0x16, 0x6d, 0x61, 0x78, 0x5f, 0x73, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0b, 0x4d, 0x61, 0x78, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x41,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2f, 0xea, 0xde, 0x1f,
	0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xfa, 0xde, 0x1f, 0x0f, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x52, 0x0d, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x42, 0x0a, 0x0d, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1c, 0xea, 0xde, 0x1f, 0x18, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f,
	0x70, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x0d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x50, 0x72, 0x6f, 0x6d, 0x70, 0x74, 0x22,
	0xeb, 0x07, 0x0a, 0x0e, 0x52, 0x6f, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x2c, 0x0a, 0x06, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x14, 0xea, 0xde, 0x1f, 0x10, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x06, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x73,
	0x12, 0x25, 0x0a, 0x0a, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x42, 0x05, 0xea, 0xde, 0x1f, 0x01, 0x2d, 0x52, 0x0a, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x73, 0x12, 0x5e, 0x0a, 0x0a, 0x4e, 0x6f, 0x64, 0x65, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x73, 0x42, 0x27, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x15, 0x6e, 0x6f, 0x64, 0x65,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0xda, 0xde, 0x1f, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x0a, 0x4e, 0x6f, 0x64,
	0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x3a, 0x0a, 0x05, 0x52, 0x75, 0x6c, 0x65, 0x73,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52,
	0x75, 0x6c, 0x65, 0x42, 0x17, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x0f, 0x72, 0x75, 0x6c,
	0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x52, 0x75,
	0x6c, 0x65, 0x73, 0x12, 0x3f, 0x0a, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1f, 0xea, 0xde, 0x1f, 0x1b, 0x6b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0a, 0x4b, 0x75, 0x62, 0x65, 0x47, 0x72,
	0x6f, 0x75, 0x70, 0x73, 0x12, 0x4f, 0x0a, 0x07, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x41, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x42, 0x15, 0xea, 0xde, 0x1f, 0x11, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x4b, 0x75, 0x62, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x73, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x42, 0x1e, 0xea, 0xde, 0x1f, 0x1a, 0x6b, 0x75,
	0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x4b, 0x75, 0x62, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x73, 0x12, 0x5b, 0x0a, 0x09, 0x41, 0x70, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x26, 0xc8,
	0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x14, 0x61, 0x70, 0x70, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xda, 0xde, 0x1f, 0x06, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x09, 0x41, 0x70, 0x70, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x12, 0x67, 0x0a, 0x0d, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65,
	0x72, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x2a,
	0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x18, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0xda, 0xde, 0x1f, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x0d, 0x43, 0x6c, 0x75, 0x73,
	0x74, 0x65, 0x72, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x70, 0x0a, 0x10, 0x4b, 0x75, 0x62,
	0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x2d, 0xc8, 0xde, 0x1f, 0x00,
	0xea, 0xde, 0x1f, 0x1b, 0x6b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x5f, 0x6c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xda,
	0xde, 0x1f, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x52, 0x10, 0x4b, 0x75, 0x62, 0x65, 0x72,
	0x6e, 0x65, 0x74, 0x65, 0x73, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x64, 0x0a, 0x0e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x0b, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x25, 0xc8, 0xde, 0x1f, 0x00,
	0xea, 0xde, 0x1f, 0x13, 0x64, 0x62, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xda, 0xde, 0x1f, 0x06, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x52, 0x0e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x73, 0x12, 0x3c, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x64, 0x62,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x3c, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x03, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x64, 0x62, 0x5f, 0x75,
	0x73, 0x65, 0x72, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d,
	0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x55, 0x73, 0x65, 0x72, 0x73, 0x22, 0xc7, 0x02,
	0x0a, 0x17, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43,
	0x6f, 0x6e, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x52, 0x6f, 0x6c,
	0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xea, 0xde, 0x1f, 0x0f, 0x72, 0x6f,
	0x6c, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x12, 0x69, 0x0a, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x54, 0x6f,
	0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61, 0x70, 0x70, 0x69, 0x6e, 0x67, 0x42, 0x21, 0xc8,
	0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x19, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x5f, 0x74, 0x6f,
	0x5f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x52, 0x0d, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x73, 0x54, 0x6f, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12,
	0x95, 0x01, 0x0a, 0x0b, 0x41, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73,
	0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x73, 0x42, 0x5c, 0xc8, 0xde,
	0x1f, 0x00, 0xea, 0xde, 0x1f, 0x15, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xda, 0xde, 0x1f, 0x3b, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61, 0x76, 0x69, 0x74,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70, 0x6f, 0x72, 0x74,
	0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70,
	0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x52, 0x0b, 0x41, 0x6e, 0x6e, 0x6f,
	0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x9c, 0x01, 0x0a, 0x19, 0x41, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x4d, 0x61,
	0x70, 0x70, 0x69, 0x6e, 0x67, 0x12, 0x29, 0x0a, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xea, 0xde, 0x1f, 0x0f, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x43, 0x6c, 0x61, 0x69, 0x6d,
	0x12, 0x29, 0x0a, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x13, 0xea, 0xde, 0x1f, 0x0f, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x29, 0x0a, 0x05, 0x52,
	0x6f, 0x6c, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xea, 0xde, 0x1f, 0x0f,
	0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x22, 0xc4, 0x01, 0x0a, 0x04, 0x52, 0x75, 0x6c, 0x65, 0x12,
	0x35, 0x0a, 0x09, 0x52, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x09, 0x42, 0x17, 0xea, 0xde, 0x1f, 0x13, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x52, 0x65, 0x73,
	0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x12, 0x29, 0x0a, 0x05, 0x56, 0x65, 0x72, 0x62, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x09, 0x42, 0x13, 0xea, 0xde, 0x1f, 0x0f, 0x76, 0x65, 0x72, 0x62, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x56, 0x65, 0x72, 0x62,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x57, 0x68, 0x65, 0x72, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x13, 0xea, 0xde, 0x1f, 0x0f, 0x77, 0x68, 0x65, 0x72, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x57, 0x68, 0x65, 0x72, 0x65, 0x12, 0x2f, 0x0a, 0x07,
	0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x42, 0x15, 0xea,
	0xde, 0x1f, 0x11, 0x61, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x41, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x21, 0x0a,
	0x09, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0xfd, 0x01, 0x0a, 0x06, 0x55, 0x73, 0x65, 0x72, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x04, 0x4b,
	0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b,
	0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12,
	0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde,
	0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74,
	0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x12, 0x33, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x11, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63,
	0x56, 0x32, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63,
	0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00,
	0x22, 0xa2, 0x06, 0x0a, 0x0a, 0x55, 0x73, 0x65, 0x72, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x12,
	0x62, 0x0a, 0x0e, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x42, 0x21, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x19, 0x6f, 0x69, 0x64, 0x63, 0x5f, 0x69,
	0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x0e, 0x4f, 0x49, 0x44, 0x43, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x69, 0x65, 0x73, 0x12, 0x62, 0x0a, 0x0e, 0x53, 0x41, 0x4d, 0x4c, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79,
	0x70, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e, 0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x42, 0x21, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x19, 0x73, 0x61,
	0x6d, 0x6c, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0e, 0x53, 0x41, 0x4d, 0x4c, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x12, 0x68, 0x0a, 0x10, 0x47, 0x69, 0x74, 0x68, 0x75,
	0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x42, 0x23, 0xc8, 0xde, 0x1f, 0x00,
	0xea, 0xde, 0x1f, 0x1b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x5f, 0x69, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x69, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x10, 0x47, 0x69, 0x74, 0x68, 0x75, 0x62, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x69, 0x65,
	0x73, 0x12, 0x29, 0x0a, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x13, 0xea, 0xde, 0x1f, 0x0f, 0x72, 0x6f, 0x6c, 0x65, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x05, 0x52, 0x6f, 0x6c, 0x65, 0x73, 0x12, 0x86, 0x01, 0x0a,
	0x06, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e,
	0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x73, 0x42, 0x57, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x10, 0x74, 0x72,
	0x61, 0x69, 0x74, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0xda, 0xde,
	0x1f, 0x3b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x67, 0x72, 0x61,
	0x76, 0x69, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x2f, 0x74, 0x65, 0x6c, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2f, 0x77, 0x72,
	0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x69, 0x74, 0x73, 0x52, 0x06, 0x54,
	0x72, 0x61, 0x69, 0x74, 0x73, 0x12, 0x44, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x42, 0x18, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x10, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde,
	0x1f, 0x00, 0xea, 0xde, 0x1f, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x52, 0x07, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x4c, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x64, 0x42, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x43, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x42, 0x79, 0x42, 0x1c, 0xc8, 0xde, 0x1f,
	0x00, 0xea, 0xde, 0x1f, 0x14, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x79, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x4f, 0x0a, 0x09, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74,
	0x68, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73,
	0x42, 0x18, 0xea, 0xde, 0x1f, 0x14, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x5f, 0x61, 0x75, 0x74, 0x68,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x22, 0x8e, 0x01, 0x0a, 0x10, 0x45, 0x78, 0x74, 0x65, 0x72, 0x6e,
	0x61, 0x6c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x12, 0x3c, 0x0a, 0x0b, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x1a, 0xea, 0xde, 0x1f, 0x16, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x5f, 0x69,
	0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0b, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x49, 0x44, 0x12, 0x32, 0x0a, 0x08, 0x55, 0x73, 0x65, 0x72,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12,
	0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x52, 0x08, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x3a, 0x08, 0x98, 0xa0,
	0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0xbd, 0x02, 0x0a, 0x0b, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x29, 0x0a, 0x08, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b,
	0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x0d, 0xea, 0xde, 0x1f, 0x09, 0x69, 0x73,
	0x5f, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x52, 0x08, 0x49, 0x73, 0x4c, 0x6f, 0x63, 0x6b, 0x65,
	0x64, 0x12, 0x42, 0x0a, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x65, 0x73, 0x73, 0x61,
	0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1c, 0xea, 0xde, 0x1f, 0x18, 0x6c, 0x6f,
	0x63, 0x6b, 0x65, 0x64, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x5d, 0x0a, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x21, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x15, 0x6c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0a, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x60, 0x0a, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x22, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x16, 0x6c, 0x6f, 0x63, 0x6b, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0b, 0x4c, 0x6f, 0x63, 0x6b, 0x45,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0xd9, 0x01, 0x0a, 0x09, 0x43, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x64, 0x42, 0x79, 0x12, 0x4e, 0x0a, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66, 0x42, 0x1b, 0xc8, 0xde,
	0x1f, 0x01, 0xea, 0xde, 0x1f, 0x13, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x12, 0x40, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x10,
	0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x74, 0x69, 0x6d, 0x65,
	0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x04, 0x55, 0x73, 0x65, 0x72, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0e, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x66, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x75, 0x73,
	0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x3a, 0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc,
	0x20, 0x00, 0x22, 0x82, 0x01, 0x0a, 0x13, 0x55, 0x32, 0x46, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74,
	0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x44, 0x61, 0x74, 0x61, 0x12, 0x19, 0x0a, 0x03, 0x52, 0x61,
	0x77, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xea, 0xde, 0x1f, 0x03, 0x72, 0x61, 0x77,
	0x52, 0x03, 0x52, 0x61, 0x77, 0x12, 0x2c, 0x0a, 0x09, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x6e, 0x64,
	0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x0e, 0xea, 0xde, 0x1f, 0x0a, 0x6b, 0x65,
	0x79, 0x5f, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x52, 0x09, 0x4b, 0x65, 0x79, 0x48, 0x61, 0x6e,
	0x64, 0x6c, 0x65, 0x12, 0x22, 0x0a, 0x06, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x0a, 0xea, 0xde, 0x1f, 0x06, 0x70, 0x75, 0x62, 0x6b, 0x65, 0x79, 0x52,
	0x06, 0x50, 0x75, 0x62, 0x4b, 0x65, 0x79, 0x22, 0xa6, 0x02, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x41, 0x75, 0x74, 0x68, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x3f, 0x0a, 0x0c,
	0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x42, 0x1b, 0xea, 0xde, 0x1f, 0x17, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64,
	0x5f, 0x68, 0x61, 0x73, 0x68, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x0c, 0x50, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x48, 0x61, 0x73, 0x68, 0x12, 0x30, 0x0a,
	0x07, 0x54, 0x4f, 0x54, 0x50, 0x4b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16,
	0xea, 0xde, 0x1f, 0x12, 0x74, 0x6f, 0x74, 0x70, 0x5f, 0x6b, 0x65, 0x79, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x54, 0x4f, 0x54, 0x50, 0x4b, 0x65, 0x79, 0x12,
	0x64, 0x0a, 0x0f, 0x55, 0x32, 0x46, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x55, 0x32, 0x46, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x61, 0x74, 0x61, 0x42, 0x1e, 0xea, 0xde, 0x1f, 0x1a, 0x75, 0x32, 0x66, 0x5f, 0x72, 0x65,
	0x67, 0x69, 0x73, 0x74, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x0f, 0x55, 0x32, 0x46, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0a, 0x55, 0x32, 0x46, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x19, 0xea, 0xde, 0x1f, 0x15, 0x75,
	0x32, 0x66, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x0a, 0x55, 0x32, 0x46, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x65, 0x72,
	0x22, 0x6e, 0x0a, 0x0c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x66,
	0x12, 0x1c, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xea, 0xde, 0x1f, 0x04, 0x74, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x06, 0xea, 0xde, 0x1f, 0x02,
	0x69, 0x64, 0x52, 0x02, 0x49, 0x44, 0x12, 0x28, 0x0a, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x69, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x08, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79,
	0x22, 0x27, 0x0a, 0x07, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x66, 0x12, 0x1c, 0x0a, 0x04, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x85, 0x02, 0x0a, 0x0f, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x56, 0x32, 0x12, 0x1c, 0x0a,
	0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f,
	0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53,
	0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde,
	0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a,
	0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b,
	0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f,
	0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x12, 0x3c, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73,
	0x65, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x42, 0x0c, 0xc8,
	0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65,
	0x63, 0x22, 0xad, 0x01, 0x0a, 0x13, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x54, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x12, 0x32, 0x0a, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10,
	0xea, 0xde, 0x1f, 0x0c, 0x63, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65,
	0x52, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x09, 0x44, 0x69, 0x61, 0x6c, 0x41, 0x64, 0x64, 0x72, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09,
	0x42, 0x18, 0xea, 0xde, 0x1f, 0x14, 0x64, 0x69, 0x61, 0x6c, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x73,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x09, 0x44, 0x69, 0x61, 0x6c,
	0x41, 0x64, 0x64, 0x72, 0x73, 0x12, 0x2a, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x04, 0x74, 0x79, 0x70, 0x65, 0xfa, 0xde, 0x1f,
	0x0a, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70,
	0x65, 0x22, 0x95, 0x02, 0x0a, 0x12, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64,
	0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62,
	0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12,
	0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3f,
	0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x42, 0x0c, 0xc8, 0xde, 0x1f,
	0x00, 0xea, 0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a,
	0x08, 0x98, 0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0x8e, 0x02, 0x0a, 0x16, 0x54, 0x75,
	0x6e, 0x6e, 0x65, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x70,
	0x65, 0x63, 0x56, 0x32, 0x12, 0x32, 0x0a, 0x0b, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x63,
	0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0b, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x09, 0x50, 0x72, 0x6f, 0x78,
	0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xde, 0x1f,
	0x0a, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x09, 0x50, 0x72, 0x6f,
	0x78, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x66, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x24, 0x90, 0xdf, 0x1f, 0x01, 0xc8,
	0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x18, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x12, 0x2a,
	0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde,
	0x1f, 0x04, 0x74, 0x79, 0x70, 0x65, 0xfa, 0xde, 0x1f, 0x0a, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x22, 0x71, 0x0a, 0x0f, 0x53, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x2e, 0x0a,
	0x0d, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x0d,
	0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a,
	0x0d, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d,
	0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x99, 0x02,
	0x0a, 0x17, 0x41, 0x63, 0x71, 0x75, 0x69, 0x72, 0x65, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f,
	0x72, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2e, 0x0a, 0x0d, 0x53, 0x65, 0x6d,
	0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x0d, 0x53, 0x65, 0x6d, 0x61,
	0x70, 0x68, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x0d, 0x53, 0x65, 0x6d,
	0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x53, 0x65, 0x6d, 0x61,
	0x70, 0x68, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2f, 0x0a, 0x09, 0x4d, 0x61, 0x78,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x42, 0x11, 0xea, 0xde,
	0x1f, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x52,
	0x09, 0x4d, 0x61, 0x78, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x12, 0x49, 0x0a, 0x07, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f,
	0x00, 0xea, 0xde, 0x1f, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x52, 0x07, 0x45, 0x78,
	0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xde, 0x1f, 0x06, 0x68, 0x6f, 0x6c, 0x64, 0x65,
	0x72, 0x52, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0xe3, 0x01, 0x0a, 0x0e, 0x53, 0x65,
	0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x0d,
	0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x0d, 0x53,
	0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x0d,
	0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x0d, 0x53,
	0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x26, 0x0a, 0x07,
	0x4c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xea,
	0xde, 0x1f, 0x08, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x69, 0x64, 0x52, 0x07, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x13, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x07, 0x65,
	0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22,
	0xaa, 0x01, 0x0a, 0x11, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x52, 0x65, 0x66, 0x12, 0x26, 0x0a, 0x07, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0c, 0xea, 0xde, 0x1f, 0x08, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x69, 0x64, 0x52, 0x07, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x49, 0x44, 0x12, 0x49, 0x0a,
	0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13, 0x90, 0xdf, 0x1f, 0x01,
	0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x07, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x52,
	0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x12, 0x22, 0x0a, 0x06, 0x48, 0x6f, 0x6c, 0x64,
	0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0a, 0xea, 0xde, 0x1f, 0x06, 0x68, 0x6f,
	0x6c, 0x64, 0x65, 0x72, 0x52, 0x06, 0x48, 0x6f, 0x6c, 0x64, 0x65, 0x72, 0x22, 0x87, 0x02, 0x0a,
	0x0b, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x56, 0x33, 0x12, 0x1c, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75,
	0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f,
	0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea,
	0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x38, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x16, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f,
	0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde,
	0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98, 0xa0,
	0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0x53, 0x0a, 0x0f, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68,
	0x6f, 0x72, 0x65, 0x53, 0x70, 0x65, 0x63, 0x56, 0x33, 0x12, 0x40, 0x0a, 0x06, 0x4c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x53, 0x65, 0x6d, 0x61, 0x70, 0x68, 0x6f, 0x72, 0x65, 0x4c, 0x65, 0x61, 0x73, 0x65,
	0x52, 0x65, 0x66, 0x42, 0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x06, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x73, 0x52, 0x06, 0x4c, 0x65, 0x61, 0x73, 0x65, 0x73, 0x22, 0x89, 0x02, 0x0a, 0x0c,
	0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x04,
	0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04,
	0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30, 0x0a, 0x07, 0x53, 0x75,
	0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x16, 0xea, 0xde, 0x1f,
	0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x25, 0x0a, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x0b, 0xea,
	0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x08,
	0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x12, 0x39, 0x0a, 0x04, 0x53, 0x70, 0x65, 0x63, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x17, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x57, 0x65, 0x62, 0x53, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x42, 0x0c, 0xc8, 0xde, 0x1f, 0x00, 0xea,
	0xde, 0x1f, 0x04, 0x73, 0x70, 0x65, 0x63, 0x52, 0x04, 0x53, 0x70, 0x65, 0x63, 0x3a, 0x08, 0x98,
	0xa0, 0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0x92, 0x03, 0x0a, 0x10, 0x57, 0x65, 0x62, 0x53,
	0x65, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x53, 0x70, 0x65, 0x63, 0x56, 0x32, 0x12, 0x1c, 0x0a, 0x04,
	0x55, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x52, 0x04, 0x55, 0x73, 0x65, 0x72, 0x12, 0x19, 0x0a, 0x03, 0x50, 0x75,
	0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x07, 0xea, 0xde, 0x1f, 0x03, 0x70, 0x75, 0x62,
	0x52, 0x03, 0x50, 0x75, 0x62, 0x12, 0x26, 0x0a, 0x04, 0x50, 0x72, 0x69, 0x76, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x42, 0x12, 0xea, 0xde, 0x1f, 0x0e, 0x70, 0x72, 0x69, 0x76, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x04, 0x50, 0x72, 0x69, 0x76, 0x12, 0x30, 0x0a,
	0x07, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x16,
	0xea, 0xde, 0x1f, 0x12, 0x74, 0x6c, 0x73, 0x5f, 0x63, 0x65, 0x72, 0x74, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x54, 0x4c, 0x53, 0x43, 0x65, 0x72, 0x74, 0x12,
	0x32, 0x0a, 0x0b, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x10, 0xea, 0xde, 0x1f, 0x0c, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72,
	0x5f, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x52, 0x0b, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f,
	0x6b, 0x65, 0x6e, 0x12, 0x6c, 0x0a, 0x12, 0x42, 0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b,
	0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x20, 0x90, 0xdf, 0x1f,
	0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x14, 0x62, 0x65, 0x61, 0x72, 0x65, 0x72, 0x5f,
	0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x5f, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x52, 0x12, 0x42,
	0x65, 0x61, 0x72, 0x65, 0x72, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65,
	0x73, 0x12, 0x49, 0x0a, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x13,
	0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x07, 0x65, 0x78, 0x70, 0x69,
	0x72, 0x65, 0x73, 0x52, 0x07, 0x45, 0x78, 0x70, 0x69, 0x72, 0x65, 0x73, 0x22, 0x97, 0x02, 0x0a,
	0x0f, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x56, 0x33,
	0x12, 0x1c, 0x0a, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x08,
	0xea, 0xde, 0x1f, 0x04, 0x6b, 0x69, 0x6e, 0x64, 0x52, 0x04, 0x4b, 0x69, 0x6e, 0x64, 0x12, 0x30,
	0x0a, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42,
	0x16, 0xea, 0xde, 0x1f, 0x12, 0x73, 0x75, 0x62, 0x5f, 0x6b, 0x69, 0x6e, 0x64, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x07, 0x53, 0x75, 0x62, 0x4b, 0x69, 0x6e, 0x64,
	0x12, 0x25, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x0b, 0xea, 0xde, 0x1f, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x07,
	0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x65, 0x74, 0x61, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x74, 0x79, 0x70, 0x65,
	0x73, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x42, 0x10, 0xc8, 0xde, 0x1f, 0x00,
	0xea, 0xde, 0x1f, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x52, 0x08, 0x4d, 0x65,
	0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x44, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x52,
	0x65, 0x6d, 0x6f, 0x74, 0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x56, 0x33, 0x42, 0x0e, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x52, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x3a, 0x08, 0x98, 0xa0,
	0x1f, 0x00, 0x80, 0xdc, 0x20, 0x00, 0x22, 0xa5, 0x01, 0x0a, 0x15, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x56, 0x33,
	0x12, 0x2e, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x0e, 0xea, 0xde, 0x1f, 0x0a, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0a, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x5c, 0x0a, 0x0d, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x42, 0x1a, 0x90, 0xdf, 0x1f, 0x01, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f,
	0x0e, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x0d, 0x4c, 0x61, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x22, 0xad,
	0x03, 0x0a, 0x11, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75,
	0x73, 0x74, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x08, 0xea, 0xde, 0x1f, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x52, 0x04, 0x4e, 0x61,
	0x6d, 0x65, 0x12, 0x6b, 0x0a, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73,
	0x2e, 0x4b, 0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74,
	0x65, 0x72, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x42, 0x1b, 0xea, 0xde, 0x1f, 0x17, 0x73, 0x74, 0x61, 0x74, 0x69, 0x63,
	0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x52, 0x0c, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12,
	0x73, 0x0a, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73,
	0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x74, 0x79, 0x70, 0x65, 0x73, 0x2e, 0x4b,
	0x75, 0x62, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x65, 0x73, 0x43, 0x6c, 0x75, 0x73, 0x74, 0x65, 0x72,
	0x2e, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e,
	0x74, 0x72, 0x79, 0x42, 0x20, 0xc8, 0xde, 0x1f, 0x00, 0xea, 0xde, 0x1f, 0x18, 0x64, 0x79, 0x6e,
	0x61, 0x6d, 0x69, 0x63, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x52, 0x0d, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x1a, 0x3f, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x74, 0x69, 0x63, 0x4c, 0x61,
	0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x57, 0x0a, 0x12, 0x44, 0x79, 0x6e, 0x61, 0x6d, 0x69, 0x63,
	0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b,
	0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x2b, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x15, 0x2e, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x56, 0x32, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x2a, 0x3f,
	0x0a, 0x0c, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x50, 0x45, 0x4e, 0x44,
	0x49, 0x4e, 0x47, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x50, 0x50, 0x52, 0x4f, 0x56, 0x45,
	0x44, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x45, 0x4e, 0x49, 0x45, 0x44, 0x10, 0x03, 0x42,
	0x0c, 0xc8, 0xe2, 0x1e, 0x01, 0xd0, 0xe2, 0x1e, 0x01, 0xc8, 0xe1, 0x1e, 0x00, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_types_proto_rawDescOnce sync.Once
	file_types_proto_rawDescData = file_types_proto_rawDesc
)

func file_types_proto_rawDescGZIP() []byte {
	file_types_proto_rawDescOnce.Do(func() {
		file_types_proto_rawDescData = protoimpl.X.CompressGZIP(file_types_proto_rawDescData)
	})
	return file_types_proto_rawDescData
}

var file_types_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_types_proto_msgTypes = make([]protoimpl.MessageInfo, 87)
var file_types_proto_goTypes = []interface{}{
	(RequestState)(0),                       // 0: types.RequestState
	(KeepAlive_KeepAliveType)(0),            // 1: types.KeepAlive.KeepAliveType
	(CertAuthoritySpecV2_SigningAlgType)(0), // 2: types.CertAuthoritySpecV2.SigningAlgType
	(*KeepAlive)(nil),                       // 3: types.KeepAlive
	(*Metadata)(nil),                        // 4: types.Metadata
	(*Rotation)(nil),                        // 5: types.Rotation
	(*RotationSchedule)(nil),                // 6: types.RotationSchedule
	(*ResourceHeader)(nil),                  // 7: types.ResourceHeader
	(*DatabaseServerV3)(nil),                // 8: types.DatabaseServerV3
	(*DatabaseServerSpecV3)(nil),            // 9: types.DatabaseServerSpecV3
	(*AWS)(nil),                             // 10: types.AWS
	(*ServerV2)(nil),                        // 11: types.ServerV2
	(*ServerSpecV2)(nil),                    // 12: types.ServerSpecV2
	(*App)(nil),                             // 13: types.App
	(*Rewrite)(nil),                         // 14: types.Rewrite
	(*CommandLabelV2)(nil),                  // 15: types.CommandLabelV2
	(*TLSKeyPair)(nil),                      // 16: types.TLSKeyPair
	(*JWTKeyPair)(nil),                      // 17: types.JWTKeyPair
	(*CertAuthorityV2)(nil),                 // 18: types.CertAuthorityV2
	(*CertAuthoritySpecV2)(nil),             // 19: types.CertAuthoritySpecV2
	(*RoleMapping)(nil),                     // 20: types.RoleMapping
	(*ProvisionTokenV1)(nil),                // 21: types.ProvisionTokenV1
	(*ProvisionTokenV2)(nil),                // 22: types.ProvisionTokenV2
	(*ProvisionTokenSpecV2)(nil),            // 23: types.ProvisionTokenSpecV2
	(*StaticTokensV2)(nil),                  // 24: types.StaticTokensV2
	(*StaticTokensSpecV2)(nil),              // 25: types.StaticTokensSpecV2
	(*ClusterNameV2)(nil),                   // 26: types.ClusterNameV2
	(*ClusterNameSpecV2)(nil),               // 27: types.ClusterNameSpecV2
	(*ClusterConfigV3)(nil),                 // 28: types.ClusterConfigV3
	(*ClusterConfigSpecV3)(nil),             // 29: types.ClusterConfigSpecV3
	(*AuditConfig)(nil),                     // 30: types.AuditConfig
	(*Namespace)(nil),                       // 31: types.Namespace
	(*NamespaceSpec)(nil),                   // 32: types.NamespaceSpec
	(*ResetPasswordTokenV3)(nil),            // 33: types.ResetPasswordTokenV3
	(*ResetPasswordTokenSpecV3)(nil),        // 34: types.ResetPasswordTokenSpecV3
	(*ResetPasswordTokenSecretsV3)(nil),     // 35: types.ResetPasswordTokenSecretsV3
	(*ResetPasswordTokenSecretsSpecV3)(nil), // 36: types.ResetPasswordTokenSecretsSpecV3
	(*AccessRequestV3)(nil),                 // 37: types.AccessRequestV3
	(*AccessRequestSpecV3)(nil),             // 38: types.AccessRequestSpecV3
	(*AccessRequestFilter)(nil),             // 39: types.AccessRequestFilter
	(*AccessCapabilities)(nil),              // 40: types.AccessCapabilities
	(*AccessCapabilitiesRequest)(nil),       // 41: types.AccessCapabilitiesRequest
	(*PluginDataV3)(nil),                    // 42: types.PluginDataV3
	(*PluginDataEntry)(nil),                 // 43: types.PluginDataEntry
	(*PluginDataSpecV3)(nil),                // 44: types.PluginDataSpecV3
	(*PluginDataFilter)(nil),                // 45: types.PluginDataFilter
	(*PluginDataUpdateParams)(nil),          // 46: types.PluginDataUpdateParams
	(*RoleV3)(nil),                          // 47: types.RoleV3
	(*RoleSpecV3)(nil),                      // 48: types.RoleSpecV3
	(*RoleOptions)(nil),                     // 49: types.RoleOptions
	(*RoleConditions)(nil),                  // 50: types.RoleConditions
	(*AccessRequestConditions)(nil),         // 51: types.AccessRequestConditions
	(*AccessRequestClaimMapping)(nil),       // 52: types.AccessRequestClaimMapping
	(*Rule)(nil),                            // 53: types.Rule
	(*BoolValue)(nil),                       // 54: types.BoolValue
	(*UserV2)(nil),                          // 55: types.UserV2
	(*UserSpecV2)(nil),                      // 56: types.UserSpecV2
	(*ExternalIdentity)(nil),                // 57: types.ExternalIdentity
	(*LoginStatus)(nil),                     // 58: types.LoginStatus
	(*CreatedBy)(nil),                       // 59: types.CreatedBy
	(*U2FRegistrationData)(nil),             // 60: types.U2FRegistrationData
	(*LocalAuthSecrets)(nil),                // 61: types.LocalAuthSecrets
	(*ConnectorRef)(nil),                    // 62: types.ConnectorRef
	(*UserRef)(nil),                         // 63: types.UserRef
	(*ReverseTunnelV2)(nil),                 // 64: types.ReverseTunnelV2
	(*ReverseTunnelSpecV2)(nil),             // 65: types.ReverseTunnelSpecV2
	(*TunnelConnectionV2)(nil),              // 66: types.TunnelConnectionV2
	(*TunnelConnectionSpecV2)(nil),          // 67: types.TunnelConnectionSpecV2
	(*SemaphoreFilter)(nil),                 // 68: types.SemaphoreFilter
	(*AcquireSemaphoreRequest)(nil),         // 69: types.AcquireSemaphoreRequest
	(*SemaphoreLease)(nil),                  // 70: types.SemaphoreLease
	(*SemaphoreLeaseRef)(nil),               // 71: types.SemaphoreLeaseRef
	(*SemaphoreV3)(nil),                     // 72: types.SemaphoreV3
	(*SemaphoreSpecV3)(nil),                 // 73: types.SemaphoreSpecV3
	(*WebSessionV2)(nil),                    // 74: types.WebSessionV2
	(*WebSessionSpecV2)(nil),                // 75: types.WebSessionSpecV2
	(*RemoteClusterV3)(nil),                 // 76: types.RemoteClusterV3
	(*RemoteClusterStatusV3)(nil),           // 77: types.RemoteClusterStatusV3
	(*KubernetesCluster)(nil),               // 78: types.KubernetesCluster
	nil,                                     // 79: types.Metadata.LabelsEntry
	nil,                                     // 80: types.DatabaseServerSpecV3.DynamicLabelsEntry
	nil,                                     // 81: types.ServerSpecV2.CmdLabelsEntry
	nil,                                     // 82: types.App.StaticLabelsEntry
	nil,                                     // 83: types.App.DynamicLabelsEntry
	nil,                                     // 84: types.PluginDataEntry.DataEntry
	nil,                                     // 85: types.PluginDataSpecV3.EntriesEntry
	nil,                                     // 86: types.PluginDataUpdateParams.SetEntry
	nil,                                     // 87: types.PluginDataUpdateParams.ExpectEntry
	nil,                                     // 88: types.KubernetesCluster.StaticLabelsEntry
	nil,                                     // 89: types.KubernetesCluster.DynamicLabelsEntry
	(*timestamppb.Timestamp)(nil),           // 90: google.protobuf.Timestamp
	(*wrappers.StringValues)(nil),           // 91: wrappers.StringValues
	(*wrappers.LabelValues)(nil),            // 92: wrappers.LabelValues
}
var file_types_proto_depIdxs = []int32{
	90,  // 0: types.KeepAlive.Expires:type_name -> google.protobuf.Timestamp
	1,   // 1: types.KeepAlive.Type:type_name -> types.KeepAlive.KeepAliveType
	79,  // 2: types.Metadata.Labels:type_name -> types.Metadata.LabelsEntry
	90,  // 3: types.Metadata.Expires:type_name -> google.protobuf.Timestamp
	90,  // 4: types.Rotation.Started:type_name -> google.protobuf.Timestamp
	90,  // 5: types.Rotation.LastRotated:type_name -> google.protobuf.Timestamp
	6,   // 6: types.Rotation.Schedule:type_name -> types.RotationSchedule
	90,  // 7: types.RotationSchedule.UpdateClients:type_name -> google.protobuf.Timestamp
	90,  // 8: types.RotationSchedule.UpdateServers:type_name -> google.protobuf.Timestamp
	90,  // 9: types.RotationSchedule.Standby:type_name -> google.protobuf.Timestamp
	4,   // 10: types.ResourceHeader.Metadata:type_name -> types.Metadata
	4,   // 11: types.DatabaseServerV3.Metadata:type_name -> types.Metadata
	9,   // 12: types.DatabaseServerV3.Spec:type_name -> types.DatabaseServerSpecV3
	10,  // 13: types.DatabaseServerSpecV3.AWS:type_name -> types.AWS
	80,  // 14: types.DatabaseServerSpecV3.DynamicLabels:type_name -> types.DatabaseServerSpecV3.DynamicLabelsEntry
	5,   // 15: types.DatabaseServerSpecV3.Rotation:type_name -> types.Rotation
	4,   // 16: types.ServerV2.Metadata:type_name -> types.Metadata
	12,  // 17: types.ServerV2.Spec:type_name -> types.ServerSpecV2
	81,  // 18: types.ServerSpecV2.CmdLabels:type_name -> types.ServerSpecV2.CmdLabelsEntry
	5,   // 19: types.ServerSpecV2.Rotation:type_name -> types.Rotation
	13,  // 20: types.ServerSpecV2.Apps:type_name -> types.App
	78,  // 21: types.ServerSpecV2.KubernetesClusters:type_name -> types.KubernetesCluster
	82,  // 22: types.App.StaticLabels:type_name -> types.App.StaticLabelsEntry
	83,  // 23: types.App.DynamicLabels:type_name -> types.App.DynamicLabelsEntry
	14,  // 24: types.App.Rewrite:type_name -> types.Rewrite
	4,   // 25: types.CertAuthorityV2.Metadata:type_name -> types.Metadata
	19,  // 26: types.CertAuthorityV2.Spec:type_name -> types.CertAuthoritySpecV2
	20,  // 27: types.CertAuthoritySpecV2.RoleMap:type_name -> types.RoleMapping
	16,  // 28: types.CertAuthoritySpecV2.TLSKeyPairs:type_name -> types.TLSKeyPair
	5,   // 29: types.CertAuthoritySpecV2.Rotation:type_name -> types.Rotation
	2,   // 30: types.CertAuthoritySpecV2.SigningAlg:type_name -> types.CertAuthoritySpecV2.SigningAlgType
	17,  // 31: types.CertAuthoritySpecV2.JWTKeyPairs:type_name -> types.JWTKeyPair
	90,  // 32: types.ProvisionTokenV1.Expires:type_name -> google.protobuf.Timestamp
	4,   // 33: types.ProvisionTokenV2.Metadata:type_name -> types.Metadata
	23,  // 34: types.ProvisionTokenV2.Spec:type_name -> types.ProvisionTokenSpecV2
	4,   // 35: types.StaticTokensV2.Metadata:type_name -> types.Metadata
	25,  // 36: types.StaticTokensV2.Spec:type_name -> types.StaticTokensSpecV2
	21,  // 37: types.StaticTokensSpecV2.StaticTokens:type_name -> types.ProvisionTokenV1
	4,   // 38: types.ClusterNameV2.Metadata:type_name -> types.Metadata
	27,  // 39: types.ClusterNameV2.Spec:type_name -> types.ClusterNameSpecV2
	4,   // 40: types.ClusterConfigV3.Metadata:type_name -> types.Metadata
	29,  // 41: types.ClusterConfigV3.Spec:type_name -> types.ClusterConfigSpecV3
	30,  // 42: types.ClusterConfigSpecV3.Audit:type_name -> types.AuditConfig
	91,  // 43: types.AuditConfig.AuditEventsURI:type_name -> wrappers.StringValues
	4,   // 44: types.Namespace.Metadata:type_name -> types.Metadata
	32,  // 45: types.Namespace.Spec:type_name -> types.NamespaceSpec
	4,   // 46: types.ResetPasswordTokenV3.Metadata:type_name -> types.Metadata
	34,  // 47: types.ResetPasswordTokenV3.Spec:type_name -> types.ResetPasswordTokenSpecV3
	90,  // 48: types.ResetPasswordTokenSpecV3.Created:type_name -> google.protobuf.Timestamp
	4,   // 49: types.ResetPasswordTokenSecretsV3.Metadata:type_name -> types.Metadata
	36,  // 50: types.ResetPasswordTokenSecretsV3.Spec:type_name -> types.ResetPasswordTokenSecretsSpecV3
	90,  // 51: types.ResetPasswordTokenSecretsSpecV3.Created:type_name -> google.protobuf.Timestamp
	4,   // 52: types.AccessRequestV3.Metadata:type_name -> types.Metadata
	38,  // 53: types.AccessRequestV3.Spec:type_name -> types.AccessRequestSpecV3
	0,   // 54: types.AccessRequestSpecV3.State:type_name -> types.RequestState
	90,  // 55: types.AccessRequestSpecV3.Created:type_name -> google.protobuf.Timestamp
	90,  // 56: types.AccessRequestSpecV3.Expires:type_name -> google.protobuf.Timestamp
	92,  // 57: types.AccessRequestSpecV3.ResolveAnnotations:type_name -> wrappers.LabelValues
	92,  // 58: types.AccessRequestSpecV3.SystemAnnotations:type_name -> wrappers.LabelValues
	0,   // 59: types.AccessRequestFilter.State:type_name -> types.RequestState
	4,   // 60: types.PluginDataV3.Metadata:type_name -> types.Metadata
	44,  // 61: types.PluginDataV3.Spec:type_name -> types.PluginDataSpecV3
	84,  // 62: types.PluginDataEntry.Data:type_name -> types.PluginDataEntry.DataEntry
	85,  // 63: types.PluginDataSpecV3.Entries:type_name -> types.PluginDataSpecV3.EntriesEntry
	86,  // 64: types.PluginDataUpdateParams.Set:type_name -> types.PluginDataUpdateParams.SetEntry
	87,  // 65: types.PluginDataUpdateParams.Expect:type_name -> types.PluginDataUpdateParams.ExpectEntry
	4,   // 66: types.RoleV3.Metadata:type_name -> types.Metadata
	48,  // 67: types.RoleV3.Spec:type_name -> types.RoleSpecV3
	49,  // 68: types.RoleSpecV3.Options:type_name -> types.RoleOptions
	50,  // 69: types.RoleSpecV3.Allow:type_name -> types.RoleConditions
	50,  // 70: types.RoleSpecV3.Deny:type_name -> types.RoleConditions
	54,  // 71: types.RoleOptions.PortForwarding:type_name -> types.BoolValue
	92,  // 72: types.RoleConditions.NodeLabels:type_name -> wrappers.LabelValues
	53,  // 73: types.RoleConditions.Rules:type_name -> types.Rule
	51,  // 74: types.RoleConditions.Request:type_name -> types.AccessRequestConditions
	92,  // 75: types.RoleConditions.AppLabels:type_name -> wrappers.LabelValues
	92,  // 76: types.RoleConditions.ClusterLabels:type_name -> wrappers.LabelValues
	92,  // 77: types.RoleConditions.KubernetesLabels:type_name -> wrappers.LabelValues
	92,  // 78: types.RoleConditions.DatabaseLabels:type_name -> wrappers.LabelValues
	52,  // 79: types.AccessRequestConditions.ClaimsToRoles:type_name -> types.AccessRequestClaimMapping
	92,  // 80: types.AccessRequestConditions.Annotations:type_name -> wrappers.LabelValues
	4,   // 81: types.UserV2.Metadata:type_name -> types.Metadata
	56,  // 82: types.UserV2.Spec:type_name -> types.UserSpecV2
	57,  // 83: types.UserSpecV2.OIDCIdentities:type_name -> types.ExternalIdentity
	57,  // 84: types.UserSpecV2.SAMLIdentities:type_name -> types.ExternalIdentity
	57,  // 85: types.UserSpecV2.GithubIdentities:type_name -> types.ExternalIdentity
	92,  // 86: types.UserSpecV2.Traits:type_name -> wrappers.LabelValues
	58,  // 87: types.UserSpecV2.Status:type_name -> types.LoginStatus
	90,  // 88: types.UserSpecV2.Expires:type_name -> google.protobuf.Timestamp
	59,  // 89: types.UserSpecV2.CreatedBy:type_name -> types.CreatedBy
	61,  // 90: types.UserSpecV2.LocalAuth:type_name -> types.LocalAuthSecrets
	90,  // 91: types.LoginStatus.LockedTime:type_name -> google.protobuf.Timestamp
	90,  // 92: types.LoginStatus.LockExpires:type_name -> google.protobuf.Timestamp
	62,  // 93: types.CreatedBy.Connector:type_name -> types.ConnectorRef
	90,  // 94: types.CreatedBy.Time:type_name -> google.protobuf.Timestamp
	63,  // 95: types.CreatedBy.User:type_name -> types.UserRef
	60,  // 96: types.LocalAuthSecrets.U2FRegistration:type_name -> types.U2FRegistrationData
	4,   // 97: types.ReverseTunnelV2.Metadata:type_name -> types.Metadata
	65,  // 98: types.ReverseTunnelV2.Spec:type_name -> types.ReverseTunnelSpecV2
	4,   // 99: types.TunnelConnectionV2.Metadata:type_name -> types.Metadata
	67,  // 100: types.TunnelConnectionV2.Spec:type_name -> types.TunnelConnectionSpecV2
	90,  // 101: types.TunnelConnectionSpecV2.LastHeartbeat:type_name -> google.protobuf.Timestamp
	90,  // 102: types.AcquireSemaphoreRequest.Expires:type_name -> google.protobuf.Timestamp
	90,  // 103: types.SemaphoreLease.Expires:type_name -> google.protobuf.Timestamp
	90,  // 104: types.SemaphoreLeaseRef.Expires:type_name -> google.protobuf.Timestamp
	4,   // 105: types.SemaphoreV3.Metadata:type_name -> types.Metadata
	73,  // 106: types.SemaphoreV3.Spec:type_name -> types.SemaphoreSpecV3
	71,  // 107: types.SemaphoreSpecV3.Leases:type_name -> types.SemaphoreLeaseRef
	4,   // 108: types.WebSessionV2.Metadata:type_name -> types.Metadata
	75,  // 109: types.WebSessionV2.Spec:type_name -> types.WebSessionSpecV2
	90,  // 110: types.WebSessionSpecV2.BearerTokenExpires:type_name -> google.protobuf.Timestamp
	90,  // 111: types.WebSessionSpecV2.Expires:type_name -> google.protobuf.Timestamp
	4,   // 112: types.RemoteClusterV3.Metadata:type_name -> types.Metadata
	77,  // 113: types.RemoteClusterV3.Status:type_name -> types.RemoteClusterStatusV3
	90,  // 114: types.RemoteClusterStatusV3.LastHeartbeat:type_name -> google.protobuf.Timestamp
	88,  // 115: types.KubernetesCluster.StaticLabels:type_name -> types.KubernetesCluster.StaticLabelsEntry
	89,  // 116: types.KubernetesCluster.DynamicLabels:type_name -> types.KubernetesCluster.DynamicLabelsEntry
	15,  // 117: types.DatabaseServerSpecV3.DynamicLabelsEntry.value:type_name -> types.CommandLabelV2
	15,  // 118: types.ServerSpecV2.CmdLabelsEntry.value:type_name -> types.CommandLabelV2
	15,  // 119: types.App.DynamicLabelsEntry.value:type_name -> types.CommandLabelV2
	43,  // 120: types.PluginDataSpecV3.EntriesEntry.value:type_name -> types.PluginDataEntry
	15,  // 121: types.KubernetesCluster.DynamicLabelsEntry.value:type_name -> types.CommandLabelV2
	122, // [122:122] is the sub-list for method output_type
	122, // [122:122] is the sub-list for method input_type
	122, // [122:122] is the sub-list for extension type_name
	122, // [122:122] is the sub-list for extension extendee
	0,   // [0:122] is the sub-list for field type_name
}

func init() { file_types_proto_init() }
func file_types_proto_init() {
	if File_types_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_types_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeepAlive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Metadata); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rotation); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RotationSchedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResourceHeader); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseServerV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseServerSpecV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AWS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServerSpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*App); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rewrite); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CommandLabelV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TLSKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*JWTKeyPair); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertAuthorityV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CertAuthoritySpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionTokenV1); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionTokenV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProvisionTokenSpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticTokensV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*StaticTokensSpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNameV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterNameSpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfigV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClusterConfigSpecV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AuditConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Namespace); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NamespaceSpec); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPasswordTokenV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPasswordTokenSpecV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPasswordTokenSecretsV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ResetPasswordTokenSecretsSpecV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRequestV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRequestSpecV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[36].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRequestFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[37].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessCapabilities); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[38].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessCapabilitiesRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[39].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginDataV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[40].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginDataEntry); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[41].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginDataSpecV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[42].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginDataFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[43].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluginDataUpdateParams); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[44].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[45].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleSpecV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[46].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleOptions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[47].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RoleConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[48].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRequestConditions); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[49].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AccessRequestClaimMapping); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[50].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Rule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[51].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[52].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[53].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[54].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExternalIdentity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[55].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[56].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CreatedBy); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[57].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*U2FRegistrationData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[58].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LocalAuthSecrets); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[59].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConnectorRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[60].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[61].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseTunnelV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[62].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ReverseTunnelSpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[63].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelConnectionV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[64].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelConnectionSpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[65].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemaphoreFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[66].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AcquireSemaphoreRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[67].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemaphoreLease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[68].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemaphoreLeaseRef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[69].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemaphoreV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[70].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SemaphoreSpecV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[71].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebSessionV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[72].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WebSessionSpecV2); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[73].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteClusterV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[74].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteClusterStatusV3); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_types_proto_msgTypes[75].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KubernetesCluster); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_types_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   87,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_types_proto_goTypes,
		DependencyIndexes: file_types_proto_depIdxs,
		EnumInfos:         file_types_proto_enumTypes,
		MessageInfos:      file_types_proto_msgTypes,
	}.Build()
	File_types_proto = out.File
	file_types_proto_rawDesc = nil
	file_types_proto_goTypes = nil
	file_types_proto_depIdxs = nil
}
